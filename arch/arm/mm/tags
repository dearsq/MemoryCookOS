!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CPOLICY_BUFFERED	mmu.c	176;"	d	file:
CPOLICY_BUFFERED	mmu.c	38;"	d	file:
CPOLICY_UNCACHED	mmu.c	175;"	d	file:
CPOLICY_UNCACHED	mmu.c	37;"	d	file:
CPOLICY_WRITEALLOC	mmu.c	179;"	d	file:
CPOLICY_WRITEALLOC	mmu.c	41;"	d	file:
CPOLICY_WRITEBACK	mmu.c	178;"	d	file:
CPOLICY_WRITEBACK	mmu.c	40;"	d	file:
CPOLICY_WRITETHROUGH	mmu.c	177;"	d	file:
CPOLICY_WRITETHROUGH	mmu.c	39;"	d	file:
CURRENT_SOURCE	Makefile	/^CURRENT_SOURCE := init.c$/;"	m
MLK	init.c	422;"	d	file:
MLK	init.c	457;"	d	file:
MLK_ROUNDUP	init.c	424;"	d	file:
MLK_ROUNDUP	init.c	459;"	d	file:
MLM	init.c	423;"	d	file:
MLM	init.c	458;"	d	file:
OBJS_PATH	Makefile	/^OBJS_PATH = ..\/..\/..\/${OBJS_DIR}$/;"	m
PA_HASH_ORDER	highmem.c	15;"	d	file:
PROT_PTE_DEVICE	mmu.c	43;"	d	file:
PROT_SECT_DEVICE	mmu.c	44;"	d	file:
__initdata	init.c	/^static unsigned long phys_initrd_size  __initdata = 0;$/;"	v	file:
__initdata	init.c	/^static unsigned long phys_initrd_start __initdata = 0;$/;"	v	file:
__initdata	mmu.c	/^static struct cachepolicy cache_policies[] __initdata = {$/;"	v	typeref:struct:cache_policies	file:
__initdata	mmu.c	/^static unsigned int cachepolicy __initdata = CPOLICY_WRITEBACK;$/;"	v	file:
__initdata	mmu.c	/^static unsigned int ecc_mask __initdata = 0;$/;"	v	file:
__kmp_atomic_idx	highmem.c	/^int __kmp_atomic_idx;$/;"	v
__kunmap_atomic	highmem.c	/^void __kunmap_atomic(void *kvaddr)$/;"	f
alloc_init_pte	mmu.c	/^void __init alloc_init_pte(pmd_t *pmd,unsigned long addr,$/;"	f
alloc_init_section	mmu.c	/^void alloc_init_section(pgd_t *pgd,unsigned long addr,$/;"	f
arm_bootmem_free	init.c	/^void __init arm_bootmem_free(unsigned long min,unsigned long max_low,$/;"	f
arm_bootmem_init	init.c	/^void arm_bootmem_init(unsigned int start_pfn,$/;"	f
arm_memblock_init	init.c	/^void __init arm_memblock_init(struct meminfo *mi)$/;"	f
arm_memory_present	init.c	/^static void arm_memory_present(void)$/;"	f	file:
arm_mm_memblock_reserve	mmu.c	/^void arm_mm_memblock_reserve(void)$/;"	f
bootmem_init	init.c	/^void __init bootmem_init(void)$/;"	f
build_mem_type_table	mmu.c	/^static void __init build_mem_type_table(void)$/;"	f	file:
cachepolicy	mmu.c	/^struct cachepolicy {$/;"	s	file:
cr_alignment	mmu.c	/^static unsigned long cr_alignment;$/;"	v	file:
cr_mask	mmu.c	/^	unsigned int cr_mask;$/;"	m	struct:cachepolicy	file:
cr_no_alignment	mmu.c	/^static unsigned long cr_no_alignment;$/;"	v	file:
create_36bit_mapping	mmu.c	/^static void __init create_36bit_mapping(struct map_desc *md,$/;"	f	file:
create_mapping	mmu.c	/^static void __init create_mapping(struct map_desc *md)$/;"	f	file:
devicemaps_init	mmu.c	/^static void __init devicemaps_init(struct machine_desc *mdesc)$/;"	f	file:
early_alloc	mmu.c	/^void *early_alloc(unsigned long size)$/;"	f
early_cachepolicy	mmu.c	/^static int __init early_cachepolicy(char *p)$/;"	f	file:
early_ecc	mmu.c	/^static int __init early_ecc(char *p)$/;"	f	file:
early_initrd	init.c	/^static int __init early_initrd(char *p)$/;"	f	file:
early_nocache	mmu.c	/^static int __init early_nocache(char *__unused) $/;"	f	file:
early_nowrite	mmu.c	/^static int __init early_nowrite(char *__unused)$/;"	f	file:
early_parment	init.c	/^void early_parment(void)$/;"	f
early_pte_alloc	mmu.c	/^static pte_t * __init early_pte_alloc(pmd_t *pmd,unsigned long addr,$/;"	f	file:
early_vmalloc	mmu.c	/^static int __init early_vmalloc(char *arg)$/;"	f	file:
empty_zero_page	mmu.c	/^struct page *empty_zero_page;$/;"	v	typeref:struct:page
find_limits	init.c	/^void __init find_limits(unsigned int *min,unsigned int *max_low,$/;"	f
flush_cache_all	tlb.c	/^void flush_cache_all()$/;"	f
free_area	init.c	/^static inline int free_area(unsigned long pfn,unsigned long end,char *s)$/;"	f	file:
free_highpages	init.c	/^static void __init free_highpages(void)$/;"	f	file:
free_memmap	init.c	/^static inline void free_memmap(unsigned long start_pfn,unsigned long end_pfn)$/;"	f	file:
free_unused_memmap	init.c	/^static void __init free_unused_memmap(struct meminfo *mi)$/;"	f	file:
highest_memmap_pfn	nommu.c	/^unsigned long highest_memmap_pfn;$/;"	v
kmap_high_get	highmem.c	/^void *kmap_high_get(struct page *page)$/;"	f
kmap_init	mmu.c	/^static void __init kmap_init(void)$/;"	f	file:
kunmap_high	highmem.c	/^void kunmap_high(struct page *page)$/;"	f
lh	highmem.c	/^	struct list_head lh;     \/* List of page_address_maps *\/$/;"	m	struct:page_address_slot	typeref:struct:page_address_slot::list_head	file:
list	highmem.c	/^	struct list_head list;$/;"	m	struct:page_address_map	typeref:struct:page_address_map::list_head	file:
local_flush_tlb_all	tlb.c	/^void local_flush_tlb_all(void)$/;"	f
lowmem_limit	mmu.c	/^phys_addr_t lowmem_limit = 0;$/;"	v
map_lowmem	mmu.c	/^void __init map_lowmem(void)$/;"	f
mem_init	init.c	/^void __init mem_init(void)$/;"	f
mem_types	mmu.c	/^static struct mem_type mem_types[] = {$/;"	v	typeref:struct:mem_type	file:
meminfo	init.c	/^struct meminfo meminfo;$/;"	v	typeref:struct:meminfo
meminfo_cmp	init.c	/^static int __init meminfo_cmp(const void *_a,const void *_b)$/;"	f	file:
noalign_setup	mmu.c	/^static int __init noalign_setup(char *__unused)$/;"	f	file:
page	highmem.c	/^	struct page *page;$/;"	m	struct:page_address_map	typeref:struct:page_address_map::page	file:
page_address	highmem.c	/^void *page_address(struct page *page)$/;"	f
page_address_htable	highmem.c	/^} page_address_htable[1 << PA_HASH_ORDER];$/;"	v	typeref:struct:page_address_slot	file:
page_address_init	highmem.c	/^void __init page_address_init(void)$/;"	f
page_address_map	highmem.c	/^struct page_address_map {$/;"	s	file:
page_address_maps	highmem.c	/^static struct page_address_map page_address_maps[LAST_PKMAP];$/;"	v	typeref:struct:page_address_map	file:
page_address_pool	highmem.c	/^static struct list_head page_address_pool;  \/* freelist *\/$/;"	v	typeref:struct:list_head	file:
page_address_slot	highmem.c	/^static struct page_address_slot {$/;"	s	file:
page_slot	highmem.c	/^static struct page_address_slot *page_slot(struct page *page)$/;"	f	file:
paging_init	mmu.c	/^void __init paging_init(struct machine_desc *mdesc)$/;"	f
pgprot_kernel	mmu.c	/^pgprot_t pgprot_kernel;$/;"	v
pgprot_user	mmu.c	/^pgprot_t pgprot_user;$/;"	v
pkmap_count	highmem.c	/^static int pkmap_count[LAST_PKMAP];$/;"	v	file:
pkmap_page_table	highmem.c	/^pte_t *pkmap_page_table;$/;"	v
pmd	mmu.c	/^	unsigned int pmd;$/;"	m	struct:cachepolicy	file:
policy	mmu.c	/^	const char policy[16];$/;"	m	struct:cachepolicy	file:
prepare_page_table	mmu.c	/^static inline void prepare_page_table(void)$/;"	f	file:
protection_map	mmap.c	/^pgprot_t protection_map[16] = {$/;"	v
pte	mmu.c	/^	pteval_t pte;$/;"	m	struct:cachepolicy	file:
sanity_check_meminfo	mmu.c	/^static void __init sanity_check_meminfo(void)$/;"	f	file:
show_mem	init.c	/^void show_mem(void)$/;"	f
sysctl_overcommit_memory	mmap.c	/^int sysctl_overcommit_memory = OVERCOMMIT_GUESS;  \/* heuristic overcommit *\/$/;"	v
top_pmd	mmu.c	/^pmd_t *top_pmd;$/;"	v
unlock_kmao_any	highmem.c	36;"	d	file:
vectors_base	mmu.c	708;"	d	file:
virtual	highmem.c	/^	void *virtual;$/;"	m	struct:page_address_map	file:
vmalloc_min	mmu.c	/^void *vmalloc_min = (void *)(VMALLOC_END - SZ_128M);$/;"	v
