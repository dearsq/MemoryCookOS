!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ZONELIST_ORDER_DEFAULT	page_alloc.c	29;"	d	file:
ZONELIST_ORDER_NODE	page_alloc.c	30;"	d	file:
ZONELIST_ORDER_ZONE	page_alloc.c	31;"	d	file:
___alloc_bootmem	bootmem.c	/^static void * __init ___alloc_bootmem(unsigned long size,unsigned long align,$/;"	f	file:
___alloc_bootmem_node	bootmem.c	/^static void * __init ___alloc_bootmem_node(struct bootmem_data *bdata,$/;"	f	file:
___alloc_bootmem_nopanic	bootmem.c	/^static void * __init ___alloc_bootmem_nopanic(unsigned long size,$/;"	f	file:
__alloc_bootmem_node	bootmem.c	/^void * __init __alloc_bootmem_node(struct pglist_data *pgdat,$/;"	f
__build_all_zonelist	page_alloc.c	/^static __init_refok int __build_all_zonelist(void *data)$/;"	f	file:
__free	bootmem.c	/^static void __init __free(struct bootmem_data *bdata,$/;"	f	file:
__memblock_alloc_base	memblock.c	/^phys_addr_t __init __memblock_alloc_base(phys_addr_t size,phys_addr_t align,$/;"	f
__reserve	bootmem.c	/^static int __init __reserve(struct bootmem_data *bdata,unsigned long sidx,$/;"	f	file:
align_idx	bootmem.c	/^static unsigned long __init align_idx(struct bootmem_data *bdata,$/;"	f	file:
align_off	bootmem.c	/^static unsigned long __init align_off(struct bootmem_data *bdata,$/;"	f	file:
alloc_arch_preferred_bootmem	bootmem.c	/^static void * __init alloc_arch_preferred_bootmem(struct bootmem_data *bdata,$/;"	f	file:
alloc_bootmem_core	bootmem.c	/^static void * __init alloc_bootmem_core(struct bootmem_data *bdata,$/;"	f	file:
alloc_init_pte	mmu.c	/^void __init alloc_init_pte(pmd_t *pmd,unsigned long addr,$/;"	f
alloc_init_section	mmu.c	/^void alloc_init_section(pgd_t *pgd,unsigned long addr,$/;"	f
alloc_node_mem_map	memblock.c	/^static void alloc_node_mem_map(struct pglist_data *pgdat)$/;"	f	file:
alloc_remap	memblock.c	/^static inline void *alloc_remap(int nid,unsigned long size)$/;"	f	file:
arm_bootmem_free	memblock.c	/^void arm_bootmem_free(unsigned long min,unsigned long max_low,$/;"	f
arm_bootmem_init	memblock.c	/^void arm_bootmem_init(unsigned int start_pfn,$/;"	f
arm_memblock_init	init.c	/^void __init arm_memblock_init(struct meminfo *mi)$/;"	f
arm_mm_memblock_reserve	mmu.c	/^void arm_mm_memblock_reserve(void)$/;"	f
bdata_list	bootmem.c	/^struct list_head bdata_list = LIST_HEAD_INIT(bdata_list);$/;"	v	typeref:struct:list_head
bootmap_bytes	memblock.c	/^static unsigned long bootmap_bytes(unsigned long pages)$/;"	f	file:
bootmem_arch_preferred_node	bootmem.c	19;"	d	file:
bootmem_bootmap_pages	memblock.c	/^static unsigned long bootmem_bootmap_pages(unsigned long start_pfn,$/;"	f	file:
bootmem_init	init.c	/^void __init bootmem_init(void)$/;"	f
bootmem_node_data	bootmem.c	/^struct bootmem_data bootmem_node_data[MAX_NUMNODES];$/;"	v	typeref:struct:bootmem_data
build_all_zonelist	page_alloc.c	/^void build_all_zonelist(void *data)$/;"	f
build_mem_type_table	mmu.c	/^static void __init build_mem_type_table(void)$/;"	f	file:
build_zonelist_cache	page_alloc.c	/^static void build_zonelist_cache(struct pglist_data *pgdat)$/;"	f	file:
build_zonelists	page_alloc.c	/^static void build_zonelists(struct pglist_data *pgdat)$/;"	f	file:
build_zonelists_node	page_alloc.c	/^static int build_zonelists_node(struct pglist_data *pgdat,$/;"	f	file:
calculate_node_totalpages	memblock.c	/^static void calculate_node_totalpages(struct pglist_data *pgdat,$/;"	f	file:
check_highest_zone	page_alloc.c	/^static inline void check_highest_zone(int k)$/;"	f	file:
contig_pglist_data	page_alloc.c	/^struct pglist_data contig_pglist_data = {$/;"	v	typeref:struct:pglist_data
cpuset_init_current_mems_allowed	page_alloc.c	/^static inline void cpuset_init_current_mems_allowed(void) {}$/;"	f	file:
cpuset_init_mems_allowed	page_alloc.c	/^static inline void cpuset_init_mems_allowed(void) {}$/;"	f	file:
create_mapping	mmu.c	/^void create_mapping(struct map_desc *md)$/;"	f
current_zonelist_order	page_alloc.c	/^static int current_zonelist_order = ZONELIST_ORDER_DEFAULT;$/;"	v	file:
default_memory	memblock.c	/^struct memblock_region default_memory[INIT_MEMBLOCK_REGIONS + 1];$/;"	v	typeref:struct:memblock_region
default_reserved	memblock.c	/^struct memblock_region default_reserved[INIT_MEMBLOCK_REGIONS + 1];$/;"	v	typeref:struct:memblock_region
devicemaps_init	mmu.c	/^static void __init devicemaps_init(void)$/;"	f	file:
dma_reserve	page_alloc.c	/^static unsigned long __meminitdata dma_reserve;$/;"	v	file:
early_alloc	mmu.c	/^void *early_alloc(unsigned long size)$/;"	f
early_parment	init.c	/^void early_parment(void)$/;"	f
early_pte_alloc	mmu.c	/^static pte_t * __init early_pte_alloc(pmd_t *pmd,unsigned long addr,$/;"	f	file:
early_vmalloc	mmu.c	/^void early_vmalloc(void)$/;"	f
empty_zero_page	mmu.c	/^struct page *empty_zero_page;$/;"	v	typeref:struct:page
find_limits	init.c	/^void __init find_limits(unsigned int *min,unsigned int *max_low,$/;"	f
flush_cache_all	tlb.c	/^void flush_cache_all()$/;"	f
free_area_init_core	page_alloc.c	/^void __paginginit free_area_init_core(struct pglist_data *pgdat,$/;"	f
free_area_init_node	memblock.c	/^static void free_area_init_node(int nid,unsigned long *zone_sizes,$/;"	f	file:
free_bootmem	bootmem.c	/^void __init free_bootmem(unsigned long addr,unsigned long size)$/;"	f
get_pageblock_bitmap	page_alloc.c	/^static inline unsigned long *get_pageblock_bitmap(struct zone *zone,$/;"	f	file:
high_memory	memory.c	/^void *high_memory;$/;"	v
highest_memmap_pfn	nommu.c	/^unsigned long highest_memmap_pfn;$/;"	v
init_bootmem_core	memblock.c	/^static unsigned long __init init_bootmem_core(struct bootmem_data *bdata,$/;"	f	file:
init_bootmem_node	memblock.c	/^static long __init init_bootmem_node(struct pglist_data *pgdat,$/;"	f	file:
init_currently_empty_zone	page_alloc.c	/^__meminit int init_currently_empty_zone(struct zone *zone,$/;"	f
init_mm	init-mm.c	/^struct mm_struct init_mm = {$/;"	v	typeref:struct:mm_struct
init_waitqueue_head	page_alloc.c	/^static inline void init_waitqueue_head(struct pglist_data *pgdat) {}$/;"	f	file:
kmap_init	mmu.c	/^static void __init kmap_init(void)$/;"	f	file:
link_bootmem	memblock.c	/^static void link_bootmem(struct bootmem_data *bdata)$/;"	f	file:
local_flush_tlb_all	tlb.c	/^void local_flush_tlb_all(void)$/;"	f
lowmem_limit	mmu.c	/^phys_addr_t lowmem_limit = 0;$/;"	v
map_lowmem	mmu.c	/^void __init map_lowmem(void)$/;"	f
mark_bootmem	bootmem.c	/^static int __init mark_bootmem(unsigned long start,unsigned long end,$/;"	f	file:
mark_bootmem_node	bootmem.c	/^static int __init mark_bootmem_node(bootmem_data_t *bdata,$/;"	f	file:
max_low_pfn	bootmem.c	/^unsigned long max_low_pfn;$/;"	v
max_pfn	bootmem.c	/^unsigned long max_pfn;$/;"	v
mem_map	memory.c	/^struct page *mem_map;$/;"	v	typeref:struct:page
memblock	memblock.c	/^struct memblock memblock = {$/;"	v	typeref:struct:memblock
memblock_add	memblock.c	/^long __init_memblock memblock_add(phys_addr_t base,phys_addr_t size)$/;"	f
memblock_add_region	memblock.c	/^static int memblock_add_region(struct memblock_type *type,$/;"	f	file:
memblock_adjacent_addr	memblock.c	/^static long __init_memblock memblock_adjacent_addr(phys_addr_t base1,$/;"	f	file:
memblock_align_down	memblock.c	/^static phys_addr_t memblock_align_down(phys_addr_t addr,$/;"	f	file:
memblock_align_up	memblock.c	/^static phys_addr_t memblock_align_up(phys_addr_t addr,phys_addr_t align)$/;"	f	file:
memblock_alloc	memblock.c	/^phys_addr_t memblock_alloc(phys_addr_t size,phys_addr_t align)$/;"	f
memblock_alloc_base	memblock.c	/^static phys_addr_t memblock_alloc_base(phys_addr_t size,phys_addr_t align,$/;"	f	file:
memblock_analyze	memblock.c	/^void __init memblock_analyze(void)$/;"	f
memblock_coalesce_regions	memblock.c	/^static void memblock_coalesce_regions(struct memblock_type *type,$/;"	f	file:
memblock_dump	memblock.c	/^static void __init_memblock memblock_dump(struct memblock_type *type,$/;"	f	file:
memblock_dump_all	memblock.c	/^void __init_memblock memblock_dump_all(void)$/;"	f
memblock_find_base	memblock.c	/^static phys_addr_t __init_memblock memblock_find_base(phys_addr_t size,$/;"	f	file:
memblock_find_region	memblock.c	/^static phys_addr_t memblock_find_region(phys_addr_t start,phys_addr_t end,$/;"	f	file:
memblock_init	memblock.c	/^void __init memblock_init(void)$/;"	f
memblock_memory_can_coalesce	memblock.c	/^static int memblock_memory_can_coalesce(phys_addr_t addr1,$/;"	f	file:
memblock_overlaps_addr	memblock.c	/^static int memblock_overlaps_addr(phys_addr_t base1,phys_addr_t size1,$/;"	f	file:
memblock_overlaps_region	memblock.c	/^static int memblock_overlaps_region(struct memblock_type *type,$/;"	f	file:
memblock_region_memory_base_pfn	memblock.c	/^static unsigned long memblock_region_memory_base_pfn(struct memblock_region *reg)$/;"	f	file:
memblock_region_memory_end_pfn	memblock.c	/^static unsigned long memblock_region_memory_end_pfn(struct memblock_region *reg)$/;"	f	file:
memblock_region_reserved_base_pfn	memblock.c	/^static unsigned long memblock_region_reserved_base_pfn(struct memblock_region *reg)$/;"	f	file:
memblock_region_reserved_end_pfn	memblock.c	/^static unsigned long memblock_region_reserved_end_pfn(struct memblock_region *reg)$/;"	f	file:
memblock_regions_adjacent	memblock.c	/^static long memblock_regions_adjacent(struct memblock_type *type,$/;"	f	file:
memblock_remove_region	memblock.c	/^static void __init_memblock memblock_remove_region(struct memblock_type *type,$/;"	f	file:
memblock_reserve	memblock.c	/^int memblock_reserve(phys_addr_t base,phys_addr_t size)$/;"	f
memblock_set_current_limit	memblock.c	/^void memblock_set_current_limit(phys_addr_t limit)$/;"	f
memmap_init	page_alloc.c	202;"	d	file:
memmap_init_zone	page_alloc.c	/^void __meminit memmap_init_zone(unsigned long size,int nid,unsigned long zone,$/;"	f
min_low_pfn	bootmem.c	/^unsigned long min_low_pfn;$/;"	v
mm_init_owner	fork.c	/^void mm_init_owner(struct mm_struct *mm,struct task_struct *p)$/;"	f
mminit_loglevel	mm_init.c	/^int mminit_loglevel;$/;"	v
mminit_verify_page_links	mm_init.c	/^void __meminit mminit_verify_page_links(struct page *page,enum zone_type zone,$/;"	f
mminit_verify_zonelist	mm_init.c	/^void mminit_verify_zonelist(void)$/;"	f
next_zones_zonelist	mmzone.c	/^struct zoneref *next_zones_zonelist(struct zoneref *z,$/;"	f
nr_all_pages	page_alloc.c	/^static unsigned long __meminitdata nr_all_pages;$/;"	v	file:
nr_free_pagecache_pages	page_alloc.c	/^unsigned int nr_free_pagecache_pages(void)$/;"	f
nr_free_zone_pages	page_alloc.c	/^static unsigned int nr_free_zone_pages(int offset)$/;"	f	file:
nr_kernel_pages	page_alloc.c	/^static unsigned long __meminitdata nr_kernel_pages;$/;"	v	file:
numa_node_id	page_alloc.c	/^static inline int numa_node_id(void)$/;"	f	file:
page_group_by_mobility_disabled	mmzone.c	/^int page_group_by_mobility_disabled;$/;"	v
page_zone	page_alloc.c	/^static inline struct zone *page_zone(struct page *page)$/;"	f	file:
pageblock_default_order	page_alloc.c	/^static inline int pageblock_default_order(unsigned int order)$/;"	f	file:
paging_init	mmu.c	/^void __init paging_init(void)$/;"	f
pfn_to_bitidx	page_alloc.c	/^static inline int pfn_to_bitidx(struct zone *zone,unsigned long pfn)$/;"	f	file:
pfn_to_mem	memblock.c	/^void *pfn_to_mem(unsigned int idx)$/;"	f
pgdat_page_cgroup_init	page_alloc.c	/^static inline void pgdat_page_cgroup_init(struct pglist_data *pgdat) {}$/;"	f	file:
pgdat_resize_init	page_alloc.c	/^static inline void pgdat_resize_init(struct pglist_data *pgdat) {}$/;"	f	file:
pkmap_page_table	highmem.c	/^pte_t *pkmap_page_table;$/;"	v
populated_zone	page_alloc.c	/^inline int populated_zone(struct zone *zone)$/;"	f
prepare_page_table	mmu.c	/^static inline void prepare_page_table(void)$/;"	f	file:
reserve_bootmem	bootmem.c	/^int __init reserve_bootmem(unsigned long addr,unsigned long size,$/;"	f
sanity_check_meminfo	mmu.c	/^static void __init sanity_check_meminfo(void)$/;"	f	file:
set_pageblock_flags_group	page_alloc.c	/^void set_pageblock_flags_group(struct page *page,unsigned long flags,$/;"	f
set_pageblock_migratetype	page_alloc.c	/^static void set_pageblock_migratetype(struct page *page,int migratetype)$/;"	f	file:
set_pageblock_order	page_alloc.c	44;"	d	file:
set_pte_ext	mmu.c	/^void set_pte_ext(phys_addr_t addr,unsigned long pte)$/;"	f
set_zonelist_order	page_alloc.c	/^static void set_zonelist_order(void)$/;"	f	file:
setup_usemap	page_alloc.c	/^static void __init setup_usemap(struct pglist_data *pgdat,$/;"	f	file:
spin_lock_init	page_alloc.c	/^static inline void spin_lock_init(struct zone *zone) {}$/;"	f	file:
top_pmd	mmu.c	/^pmd_t *top_pmd;$/;"	v
usemap_size	page_alloc.c	/^static unsigned long __init usemap_size(unsigned long zonesize)$/;"	f	file:
vectors_page	traps.c	/^void *vectors_page;$/;"	v
vm_total_pages	vmscan.c	/^long vm_total_pages; \/* The total number of pages which the VM controls*\/$/;"	v
vmalloc_min	mmu.c	/^void *vmalloc_min = (void *)(VMALLOC_END - SZ_128M);$/;"	v
zone_absent_pages_in_node	page_alloc.c	/^inline unsigned long __meminit zone_absent_pages_in_node(int nid,$/;"	f
zone_init_free_lists	page_alloc.c	/^static void __meminit zone_init_free_lists(struct zone *zone)$/;"	f	file:
zone_names	page_alloc.c	/^static char *const zone_names[MAX_NR_ZONES] = {$/;"	v	file:
zone_pcp_init	page_alloc.c	/^static inline void zone_pcp_init(struct zone *zone) {}$/;"	f	file:
zone_seqlock_init	page_alloc.c	/^static inline void zone_seqlock_init(struct zone *zone) {}$/;"	f	file:
zone_spanned_pages_in_node	page_alloc.c	/^inline unsigned long __meminit zone_spanned_pages_in_node(int nid,$/;"	f
zone_wait_table_init	page_alloc.c	/^static int zone_wait_table_init(struct zone *zone,$/;"	f	file:
zonelist_order_name	page_alloc.c	/^static char zonelist_order_name[3][8] = {"Default","Node","Zone"};$/;"	v	file:
zoneref_set_zone	page_alloc.c	/^static void zoneref_set_zone(struct zone *zone,struct zoneref *zoneref)$/;"	f	file:
zref_in_nodemask	mmzone.c	/^static inline int zref_in_nodemask(struct zoneref *zref,nodemask_t *nodes)$/;"	f	file:
