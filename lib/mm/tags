!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
B_show	memblock.c	/^static void B_show(unsigned long *bitmap)$/;"	f	file:
NODE_DATA	memblock.c	/^static struct pglist_data *NODE_DATA(unsigned long x)$/;"	f	file:
PHYS_OFFSET	memblock.c	/^unsigned long PHYS_OFFSET;$/;"	v
R_show	memblock.c	/^static void R_show(struct memblock_type *type,char *s)$/;"	f	file:
__free	memblock.c	/^static void __free(struct bootmem_data *bdata,unsigned long sidx,$/;"	f	file:
__memblock_alloc_base	memblock.c	/^static phys_addr_t __memblock_alloc_base(phys_addr_t size,phys_addr_t align,$/;"	f	file:
__reserve	memblock.c	/^static int __reserve(struct bootmem_data *bdata,unsigned long sidx,$/;"	f	file:
alloc_bootmem_core	memblock.c	/^static void *alloc_bootmem_core(struct bootmem_data *bdata,$/;"	f	file:
arch_init	memblock.c	/^void arch_init(void)$/;"	f
arm_bootmem_free	memblock.c	/^static void arm_bootmem_free(unsigned long min,unsigned long max_low,$/;"	f	file:
arm_bootmem_init	memblock.c	/^static void arm_bootmem_init(unsigned long start_pfn,$/;"	f	file:
bdata_list	memblock.c	/^struct list_head bdata_list;$/;"	v	typeref:struct:list_head
bootmem_bootmap_bytes	memblock.c	/^static unsigned long bootmem_bootmap_bytes(unsigned long pages)$/;"	f	file:
bootmem_bootmap_pages	memblock.c	/^static unsigned long bootmem_bootmap_pages(unsigned long start_pfn,$/;"	f	file:
bootmem_init	memblock.c	/^static void bootmem_init(void)$/;"	f	file:
calculate_node_pages	memblock.c	/^static void calculate_node_pages(struct pglist_data *pgdat,$/;"	f	file:
contig_pglist_data	memblock.c	/^struct pglist_data contig_pglist_data;$/;"	v	typeref:struct:pglist_data
default_memory	memblock.c	/^struct memblock_region default_memory[MAX_REGIONS];$/;"	v	typeref:struct:memblock_region
default_reserved	memblock.c	/^struct memblock_region default_reserved[MAX_REGIONS];$/;"	v	typeref:struct:memblock_region
free_area_init_node	memblock.c	/^static void free_area_init_node(unsigned long *zone_sizes,$/;"	f	file:
free_bootmem	memblock.c	/^static void free_bootmem(phys_addr_t addr,phys_addr_t size)$/;"	f	file:
init_bootmem_core	memblock.c	/^static void init_bootmem_core(struct bootmem_data *bdata,unsigned long bitmap,$/;"	f	file:
init_bootmem_node	memblock.c	/^static void init_bootmem_node(struct pglist_data *pgdat,unsigned long bitmap,$/;"	f	file:
link_bootmem	memblock.c	/^static void link_bootmem(struct bootmem_data *bdata)$/;"	f	file:
mark_bootmem	memblock.c	/^static int mark_bootmem(unsigned long start,unsigned long end,$/;"	f	file:
mark_bootmem_node	memblock.c	/^static int mark_bootmem_node(struct bootmem_data *bdata,$/;"	f	file:
memblock	memblock.c	/^struct memblock memblock = {$/;"	v	typeref:struct:memblock
memblock_add_region	memblock.c	/^static int memblock_add_region(struct memblock_type *type,$/;"	f	file:
memblock_adjacent_addr	memblock.c	/^static int memblock_adjacent_addr(phys_addr_t base1,phys_addr_t size1,$/;"	f	file:
memblock_align_down	memblock.c	/^static phys_addr_t memblock_align_down(phys_addr_t addr,$/;"	f	file:
memblock_align_up	memblock.c	/^static phys_addr_t memblock_align_up(phys_addr_t addr,phys_addr_t align)$/;"	f	file:
memblock_alloc_base	memblock.c	/^static phys_addr_t memblock_alloc_base(phys_addr_t size,phys_addr_t align,$/;"	f	file:
memblock_coalesce_regions	memblock.c	/^static void memblock_coalesce_regions(struct memblock_type *type,$/;"	f	file:
memblock_find_base	memblock.c	/^static phys_addr_t memblock_find_base(phys_addr_t size,phys_addr_t align,$/;"	f	file:
memblock_find_region	memblock.c	/^static phys_addr_t memblock_find_region(phys_addr_t start,phys_addr_t end,$/;"	f	file:
memblock_memory_can_coalesce	memblock.c	/^static int memblock_memory_can_coalesce(phys_addr_t addr1,$/;"	f	file:
memblock_overlaps_addr	memblock.c	/^static int memblock_overlaps_addr(phys_addr_t base1,phys_addr_t size1,$/;"	f	file:
memblock_overlaps_region	memblock.c	/^static int memblock_overlaps_region(struct memblock_type *type,$/;"	f	file:
memblock_region_memory_base_pfn	memblock.c	/^static unsigned long memblock_region_memory_base_pfn(struct memblock_region *reg)$/;"	f	file:
memblock_region_memory_end_pfn	memblock.c	/^static unsigned long memblock_region_memory_end_pfn(struct memblock_region *reg)$/;"	f	file:
memblock_region_reserved_base_pfn	memblock.c	/^static unsigned long memblock_region_reserved_base_pfn(struct memblock_region *reg)$/;"	f	file:
memblock_region_reserved_end_pfn	memblock.c	/^static unsigned long memblock_region_reserved_end_pfn(struct memblock_region *reg)$/;"	f	file:
memblock_regions_adjacent	memblock.c	/^static long memblock_regions_adjacent(struct memblock_type *type,$/;"	f	file:
memblock_remove_region	memblock.c	/^static void memblock_remove_region(struct memblock_type *type,unsigned long r)$/;"	f	file:
memory	memblock.c	/^struct memory memory = {$/;"	v	typeref:struct:memory
memory_array	memblock.c	/^unsigned long memory_array[67108864];$/;"	v
pfn_to_virt	memblock.c	/^static void *pfn_to_virt(unsigned long idx)$/;"	f	file:
phys_to_virt	memblock.c	27;"	d	file:
reserve_bootmem	memblock.c	/^static void reserve_bootmem(phys_addr_t addr,phys_addr_t size)$/;"	f	file:
zone_absent_pages_in_node	memblock.c	/^static unsigned long zone_absent_pages_in_node(int nid,$/;"	f	file:
zone_spanned_pages_in_node	memblock.c	/^static unsigned long zone_spanned_pages_in_node(int nid,$/;"	f	file:
