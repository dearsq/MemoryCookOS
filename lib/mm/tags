!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALLOC_CPUSET	page_alloc.c	48;"	d	file:
ALLOC_HARDER	page_alloc.c	46;"	d	file:
ALLOC_HIGH	page_alloc.c	47;"	d	file:
ALLOC_NO_WATERMARKS	page_alloc.c	41;"	d	file:
ALLOC_WMARK_HIGH	page_alloc.c	40;"	d	file:
ALLOC_WMARK_LOW	page_alloc.c	39;"	d	file:
ALLOC_WMARK_MASK	page_alloc.c	44;"	d	file:
ALLOC_WMARK_MIN	page_alloc.c	38;"	d	file:
ARCH_LOW_ADDRESS_LIMIT	bootmem.c	31;"	d	file:
CPOLICY_BUFFERED	mmu.c	31;"	d	file:
CPOLICY_UNCACHED	mmu.c	30;"	d	file:
CPOLICY_WRITEALLOC	mmu.c	34;"	d	file:
CPOLICY_WRITEBACK	mmu.c	33;"	d	file:
CPOLICY_WRITETHROUGH	mmu.c	32;"	d	file:
DEBUG_DEFAULT_FLAGS	slub.c	36;"	d	file:
MAX_OBJS_PER_PAGE	slub.c	55;"	d	file:
MLK	init.c	322;"	d	file:
MLK	init.c	357;"	d	file:
MLK_ROUNDUP	init.c	324;"	d	file:
MLK_ROUNDUP	init.c	359;"	d	file:
MLM	init.c	323;"	d	file:
MLM	init.c	358;"	d	file:
OO_MASK	slub.c	54;"	d	file:
OO_SHIFT	slub.c	53;"	d	file:
PA_HASH_ORDER	highmem.c	16;"	d	file:
PROT_PTE_DEVICE	mmu.c	36;"	d	file:
PROT_SECT_DEVICE	mmu.c	37;"	d	file:
PageCompound	page_alloc.c	111;"	d	file:
TRACK_ALLOC	slub.c	/^	TRACK_ALLOC,$/;"	e	enum:track_item	file:
TRACK_FREE	slub.c	/^	TRACK_FREE$/;"	e	enum:track_item	file:
ZONELIST_ORDER_DEFAULT	page_alloc.c	59;"	d	file:
ZONELIST_ORDER_NODE	page_alloc.c	60;"	d	file:
ZONELIST_ORDER_ZONE	page_alloc.c	61;"	d	file:
__ClearPageHead	page_alloc.c	110;"	d	file:
__OBJECT_POISON	slub.c	51;"	d	file:
__P000	mmap.c	13;"	d	file:
__P001	mmap.c	14;"	d	file:
__P010	mmap.c	15;"	d	file:
__P011	mmap.c	16;"	d	file:
__P100	mmap.c	17;"	d	file:
__P101	mmap.c	18;"	d	file:
__P110	mmap.c	19;"	d	file:
__P111	mmap.c	20;"	d	file:
__S000	mmap.c	22;"	d	file:
__S001	mmap.c	23;"	d	file:
__S010	mmap.c	24;"	d	file:
__S011	mmap.c	25;"	d	file:
__S100	mmap.c	26;"	d	file:
__S101	mmap.c	27;"	d	file:
__S110	mmap.c	28;"	d	file:
__S111	mmap.c	29;"	d	file:
___alloc_bootmem	bootmem.c	/^static void * __init ___alloc_bootmem(unsigned long size,unsigned long align,$/;"	f	file:
___alloc_bootmem_node	bootmem.c	/^static void * __init ___alloc_bootmem_node(struct bootmem_data *bdata,$/;"	f	file:
___alloc_bootmem_nopanic	bootmem.c	/^static void * __init ___alloc_bootmem_nopanic(unsigned long size,$/;"	f	file:
__alloc_bootmem_low	bootmem.c	/^void * __init __alloc_bootmem_low(unsigned long size,unsigned long align,$/;"	f
__alloc_bootmem_node	bootmem.c	/^void * __init __alloc_bootmem_node(struct pglist_data *pgdat,$/;"	f
__alloc_bootmem_node_nopanic	bootmem.c	/^void * __init __alloc_bootmem_node_nopanic(struct pglist_data *pgdat,$/;"	f
__alloc_bootmem_nopanic	bootmem.c	/^void * __init __alloc_bootmem_nopanic(unsigned long size,unsigned long align,$/;"	f
__dec_zone_page_state	vmstat.c	/^void __dec_zone_page_state(struct page *page,enum zone_stat_item item)$/;"	f
__find_buddy_index	page_alloc.c	/^static inline unsigned long __find_buddy_index(unsigned long page_idx,$/;"	f	file:
__free	bootmem.c	/^static void __init __free(struct bootmem_data *bdata,$/;"	f	file:
__free_one_page	page_alloc.c	/^static inline void __free_one_page(struct page *page,$/;"	f	file:
__free_pages	page_alloc.c	/^void __free_pages(struct page *page,unsigned long order)$/;"	f
__free_pages_bootmem	page_alloc.c	/^void __meminit __free_pages_bootmem(struct page *page,unsigned int order)$/;"	f
__free_pages_ok	page_alloc.c	/^static void __free_pages_ok(struct page *page,unsigned int order)$/;"	f	file:
__free_slab	slub.c	/^static void __free_slab(struct kmem_cache *s,struct page *page)$/;"	f	file:
__init_page_cgroup	page_cgroup.c	/^static void __meminit __init_page_cgroup(struct page_cgroup *pc,$/;"	f	file:
__initdata	mmu.c	/^static struct cachepolicy cache_policies[] __initdata = {$/;"	v	typeref:struct:cache_policies	file:
__initdata	mmu.c	/^static unsigned int cachepolicy __initdata = CPOLICY_WRITEBACK;$/;"	v	file:
__initdata	mmu.c	/^static unsigned int ecc_mask __initdata = 0;$/;"	v	file:
__kmp_atomic_idx	highmem.c	/^int __kmp_atomic_idx;$/;"	v
__kunmap_atomic	highmem.c	/^void __kunmap_atomic(void *kvaddr)$/;"	f
__memblock_alloc_base	memblock.c	/^phys_addr_t __init __memblock_alloc_base(phys_addr_t size,phys_addr_t align,$/;"	f
__read_mostly	page_alloc.c	/^gfp_t gfp_allowed_mask __read_mostly = GFP_BOOT_MASK;$/;"	v
__reserve	bootmem.c	/^static int __init __reserve(struct bootmem_data *bdata,unsigned long sidx,$/;"	f	file:
__rmqueue	page_alloc.c	/^static struct page *__rmqueue(struct zone *zone,unsigned int order,$/;"	f	file:
__rmqueue_fallback	page_alloc.c	/^static inline struct page *__rmqueue_fallback(struct zone *zone,$/;"	f	file:
__rmqueue_smallest	page_alloc.c	/^static inline struct page *__rmqueue_smallest(struct zone *zone,$/;"	f	file:
__slab_alloc	slub.c	/^static void *__slab_alloc(struct kmem_cache *s,gfp_t gfpflags,int node,$/;"	f	file:
__zone_watermark_ok	page_alloc.c	/^static bool __zone_watermark_ok(struct zone *z,int order,unsigned long mark,$/;"	f	file:
_alloc_bootmem_nopanic	bootmem.c	/^void * __init _alloc_bootmem_nopanic(unsigned long size,unsigned long align,$/;"	f
add_full	slub.c	/^static void add_full(struct kmem_cache_node *n,struct page *page)$/;"	f	file:
add_partial	slub.c	/^static void add_partial(struct kmem_cache_node *n,$/;"	f	file:
add_total	swap_state.c	/^	unsigned long add_total;$/;"	m	struct:__anon1	file:
addr	slub.c	/^	unsigned long addr;  \/* Called from address *\/$/;"	m	struct:track	file:
align_idx	bootmem.c	/^static unsigned long __init align_idx(struct bootmem_data *bdata,$/;"	f	file:
align_off	bootmem.c	/^static unsigned long __init align_off(struct bootmem_data *bdata,$/;"	f	file:
alloc_arch_preferred_bootmem	bootmem.c	/^static void * __init alloc_arch_preferred_bootmem(struct bootmem_data *bdata,$/;"	f	file:
alloc_bootmem_core	bootmem.c	/^static void * __init alloc_bootmem_core(struct bootmem_data *bdata,$/;"	f	file:
alloc_debug_processing	slub.c	/^static int alloc_debug_processing(struct kmem_cache *s,struct page *page,$/;"	f	file:
alloc_init_pte	mmu.c	/^void __init alloc_init_pte(pmd_t *pmd,unsigned long addr,$/;"	f
alloc_init_section	mmu.c	/^void alloc_init_section(pgd_t *pgd,unsigned long addr,$/;"	f
alloc_node_mem_map	memblock.c	/^static void alloc_node_mem_map(struct pglist_data *pgdat)$/;"	f	file:
alloc_node_page_cgroup	page_cgroup.c	/^static int __init alloc_node_page_cgroup(int nid)$/;"	f	file:
alloc_remap	memblock.c	/^static inline void *alloc_remap(int nid,unsigned long size)$/;"	f	file:
alloc_slab_page	slub.c	/^static inline struct page *alloc_slab_page(gfp_t flags,int node,$/;"	f	file:
allocate_slab	slub.c	/^static struct page *allocate_slab(struct kmem_cache *s,gfp_t flags,int node)$/;"	f	file:
arm_bootmem_free	memblock.c	/^void arm_bootmem_free(unsigned long min,unsigned long max_low,$/;"	f
arm_bootmem_init	memblock.c	/^void arm_bootmem_init(unsigned int start_pfn,$/;"	f
arm_memblock_init	init.c	/^void __init arm_memblock_init(struct meminfo *mi)$/;"	f
arm_mm_memblock_reserve	mmu.c	/^void arm_mm_memblock_reserve(void)$/;"	f
bad_range	page_alloc.c	/^static int bad_range(struct zone *zone,struct page *page)$/;"	f	file:
bdata_list	bootmem.c	/^struct list_head bdata_list = LIST_HEAD_INIT(bdata_list);$/;"	v	typeref:struct:list_head
bootmap_bytes	memblock.c	/^static unsigned long bootmap_bytes(unsigned long pages)$/;"	f	file:
bootmem_arch_preferred_node	bootmem.c	22;"	d	file:
bootmem_bootmap_pages	memblock.c	/^unsigned long bootmem_bootmap_pages(unsigned long start_pfn,$/;"	f
bootmem_init	init.c	/^void __init bootmem_init(void)$/;"	f
bootmem_node_data	bootmem.c	/^struct bootmem_data bootmem_node_data[MAX_NUMNODES];$/;"	v	typeref:struct:bootmem_data
buffered_rmqueue	page_alloc.c	/^static inline struct page *buffered_rmqueue(struct zone *preferred_zone,$/;"	f	file:
build_mem_type_table	mmu.c	/^static void __init build_mem_type_table(void)$/;"	f	file:
cachepolicy	mmu.c	/^struct cachepolicy {$/;"	s	file:
calculate_alignment	slub.c	/^static unsigned long calculate_alignment(unsigned long flags,$/;"	f	file:
calculate_node_totalpages	memblock.c	/^static void calculate_node_totalpages(struct pglist_data *pgdat,$/;"	f	file:
calculate_order	slub.c	/^static inline int calculate_order(int size)$/;"	f	file:
calculate_size	slub.c	/^static int calculate_size(struct kmem_cache *s,int forced_order)$/;"	f	file:
change_pageblock_range	page_alloc.c	/^static void change_pageblock_range(struct page *pageblock_page,$/;"	f	file:
check_bytes	slub.c	/^static u8 *check_bytes(u8 *start,unsigned int value,unsigned int bytes)$/;"	f	file:
check_new_page	page_alloc.c	/^static inline int check_new_page(struct page *page)$/;"	f	file:
check_poison_mem	debug-pagealloc.c	/^static void check_poison_mem(unsigned char *mem,size_t bytes)$/;"	f	file:
check_slab	slub.c	/^static int check_slab(struct kmem_cache *s,struct page *page)$/;"	f	file:
check_valid_pointer	slub.c	/^static inline int check_valid_pointer(struct kmem_cache *s,$/;"	f	file:
clear_page_poison	debug-pagealloc.c	/^static inline clear_page_poison(struct page *page)$/;"	f	file:
cont_free	slub.c	/^static int cont_free(struct page *page)$/;"	f	file:
contig_pglist_data	page_alloc.c	/^struct pglist_data contig_pglist_data = {$/;"	v	typeref:struct:pglist_data
count_partial	slub.c	/^static unsigned long count_partial(struct kmem_cache_node *n,$/;"	f	file:
cpu	slub.c	/^	int cpu;     \/* Was running on cpu *\/$/;"	m	struct:track	file:
cpuset_init_current_mems_allowed	page_alloc.c	/^static inline void cpuset_init_current_mems_allowed(void) {}$/;"	f	file:
cpuset_init_mems_allowed	page_alloc.c	/^static inline void cpuset_init_mems_allowed(void) {}$/;"	f	file:
cr_mask	mmu.c	/^	unsigned int cr_mask;$/;"	m	struct:cachepolicy	file:
create_mapping	mmu.c	/^void create_mapping(struct map_desc *md)$/;"	f
current	sched.c	/^struct task_struct current;$/;"	v	typeref:struct:task_struct
current_thread	sched.c	/^struct thread_info current_thread;$/;"	v	typeref:struct:thread_info
current_zonelist_order	page_alloc.c	/^static int current_zonelist_order = ZONELIST_ORDER_DEFAULT;$/;"	v	file:
deactive_slab	slub.c	/^static void deactive_slab(struct kmem_cache *s,struct kmem_cache_cpu *c)$/;"	f	file:
dec_slabs_node	slub.c	/^static inline void dec_slabs_node(struct kmem_cache *s,int node,int objects)$/;"	f	file:
default_memory	memblock.c	/^struct memblock_region default_memory[INIT_MEMBLOCK_REGIONS + 1];$/;"	v	typeref:struct:memblock_region
default_reserved	memblock.c	/^struct memblock_region default_reserved[INIT_MEMBLOCK_REGIONS + 1];$/;"	v	typeref:struct:memblock_region
del_total	swap_state.c	/^	unsigned long del_total;$/;"	m	struct:__anon1	file:
destroy_compound_page	page_alloc.c	/^static int destroy_compound_page(struct page *page,unsigned long order)$/;"	f	file:
devicemaps_init	mmu.c	/^static void __init devicemaps_init(void)$/;"	f	file:
discard_slab	slub.c	/^static void discard_slab(struct kmem_cache *s,struct page *page)$/;"	f	file:
dma_reserve	page_alloc.c	/^static unsigned long __meminitdata dma_reserve;$/;"	v	file:
dump_stack	traps.c	/^void dump_stack(void)$/;"	f
early_alloc	mmu.c	/^void *early_alloc(unsigned long size)$/;"	f
early_kmem_cache_node_alloc	slub.c	/^static void early_kmem_cache_node_alloc(int node)$/;"	f	file:
early_parment	init.c	/^void early_parment(void)$/;"	f
early_pte_alloc	mmu.c	/^static pte_t * __init early_pte_alloc(pmd_t *pmd,unsigned long addr,$/;"	f	file:
early_vmalloc	mmu.c	/^void early_vmalloc(void)$/;"	f
empty_zero_page	mmu.c	/^struct page *empty_zero_page;$/;"	v	typeref:struct:page
expand	page_alloc.c	/^static inline void expand(struct zone *zone,struct page *page,$/;"	f	file:
fallbacks	page_alloc.c	/^static int fallbacks[MIGRATE_TYPES][MIGRATE_TYPES - 1] = {$/;"	v	file:
find_limits	init.c	/^void __init find_limits(unsigned int *min,unsigned int *max_low,$/;"	f
find_success	swap_state.c	/^	unsigned long find_success;$/;"	m	struct:__anon1	file:
find_total	swap_state.c	/^	unsigned long find_total;$/;"	m	struct:__anon1	file:
first_online_pgdat	mmzone.c	/^struct pgdata_data *first_online_pgdat(void)$/;"	f
flush_cache_all	tlb.c	/^void flush_cache_all()$/;"	f
for_each_object	slub.c	78;"	d	file:
free_all_bootmem	bootmem.c	/^unsigned long __init free_all_bootmem(void)$/;"	f
free_all_bootmem_core	bootmem.c	/^static unsigned long __init free_all_bootmem_core(struct bootmem_data *bdata)$/;"	f	file:
free_area	init.c	/^static inline int free_area(unsigned long pfn,unsigned long end,char *s)$/;"	f	file:
free_area_init_node	memblock.c	/^static void free_area_init_node(int nid,unsigned long *zone_sizes,$/;"	f	file:
free_bootmem	bootmem.c	/^void __init free_bootmem(unsigned long addr,unsigned long size)$/;"	f
free_compound_page	page_alloc.c	/^static void free_compound_page(struct page *page)$/;"	f	file:
free_highpages	init.c	/^static void __init free_highpages(void)$/;"	f	file:
free_hot_cold_page	page_alloc.c	/^void free_hot_cold_page(struct page *page,int cold)$/;"	f
free_memmap	init.c	/^static inline void free_memmap(unsigned long start_pfn,unsigned long end_pfn)$/;"	f	file:
free_one_page	page_alloc.c	/^static void free_one_page(struct zone *zone,struct page *page,int order,$/;"	f	file:
free_page_mlock	page_alloc.c	/^static inline void free_page_mlock(struct page *page)$/;"	f	file:
free_pages_check	page_alloc.c	/^static inline int free_pages_check(struct page *page)$/;"	f	file:
free_pages_prepare	page_alloc.c	/^static bool free_pages_prepare(struct page *page,unsigned int order)$/;"	f	file:
free_pcppages_bulk	page_alloc.c	/^static void free_pcppages_bulk(struct zone *zone,int count,$/;"	f	file:
free_slab	slub.c	/^static void free_slab(struct kmem_cache *s,struct page *page)$/;"	f	file:
free_unused_memmap	init.c	/^static void __init free_unused_memmap(struct meminfo *mi)$/;"	f	file:
get_freepointer	slub.c	/^static inline void *get_freepointer(struct kmem_cache *s,void *object)$/;"	f	file:
get_node	slub.c	/^static inline struct kmem_cache_node *get_node(struct kmem_cache *s,int node)$/;"	f	file:
get_page_from_freelist	page_alloc.c	/^static struct page *get_page_from_freelist(gfp_t gfp_mask,$/;"	f	file:
get_pageblock_flags_group	page_alloc.c	/^unsigned long get_pageblock_flags_group(struct page *page,$/;"	f
get_track	slub.c	/^static struct track *get_track(struct kmem_cache *s,void *object,$/;"	f	file:
gfp_to_alloc_flags	page_alloc.c	/^static inline int gfp_to_alloc_flags(gfp_t gfp_mask)$/;"	f	file:
high_memory	memory.c	/^void *high_memory;$/;"	v
highest_memmap_pfn	nommu.c	/^unsigned long highest_memmap_pfn;$/;"	v
inc_slabs_node	slub.c	/^static inline void inc_slabs_node(struct kmem_cache *s,int node,int objects)$/;"	f	file:
init_bootmem_core	memblock.c	/^static unsigned long __init init_bootmem_core(struct bootmem_data *bdata,$/;"	f	file:
init_bootmem_node	memblock.c	/^static long __init init_bootmem_node(struct pglist_data *pgdat,$/;"	f	file:
init_kmem_cache_node	slub.c	/^static void init_kmem_cache_node(struct kmem_cache_node *n,$/;"	f	file:
init_kmem_cache_nodes	slub.c	/^static int init_kmem_cache_nodes(struct kmem_cache *s)$/;"	f	file:
init_mm	init-mm.c	/^struct mm_struct init_mm = {$/;"	v	typeref:struct:mm_struct
init_object	slub.c	/^static void init_object(struct kmem_cache *s,void *object,u8 val)$/;"	f	file:
init_waitqueue_head	page_alloc.c	/^static inline void init_waitqueue_head(struct pglist_data *pgdat) {}$/;"	f	file:
isgraph	slub.c	125;"	d	file:
kernel_map_pages	debug-pagealloc.c	/^void kernel_map_pages(struct page *page,int numpages,int enable)$/;"	f
kmap_high_get	highmem.c	/^void *kmap_high_get(struct page *page)$/;"	f
kmap_init	mmu.c	/^static void __init kmap_init(void)$/;"	f	file:
kmem_cache	slub.c	/^static struct kmem_cache *kmem_cache;$/;"	v	typeref:struct:kmem_cache	file:
kmem_cache_alloc	slub.c	/^void *kmem_cache_alloc(struct kmem_cache *s,gfp_t gfpflags)$/;"	f
kmem_cache_debug	slub.c	/^static inline int kmem_cache_debug(struct kmem_cache *s)$/;"	f	file:
kmem_cache_files	slub.c	/^static unsigned long kmem_cache_files(unsigned long objsize,$/;"	f	file:
kmem_cache_init	slub.c	/^void __init kmem_cache_init(void)$/;"	f
kmem_cache_open	slub.c	/^static int kmem_cache_open(struct kmem_cache *s,$/;"	f	file:
kmem_size	slub.c	/^static int kmem_size = sizeof(struct kmem_cache);$/;"	v	file:
kmemcheck_free_shadow	page_alloc.c	/^static inline void kmemcheck_free_shadow(struct page *p,int order) {}$/;"	f	file:
kmemcheck_pte_lookup	pte.c	/^pte_t *kmemcheck_pte_lookup(unsigned long address)$/;"	f
kunmap_high	highmem.c	/^void kunmap_high(struct page *page)$/;"	f
last_scanned_child	memcontrol.c	/^	int last_scanned_child;$/;"	m	struct:mem_cgroup	file:
lh	highmem.c	/^	struct list_head lh;     \/* List of page_address_maps *\/$/;"	m	struct:page_address_slot	typeref:struct:page_address_slot::list_head	file:
link_bootmem	memblock.c	/^static void link_bootmem(struct bootmem_data *bdata)$/;"	f	file:
list	highmem.c	/^	struct list_head list;$/;"	m	struct:page_address_map	typeref:struct:page_address_map::list_head	file:
local_flush_tlb_all	tlb.c	/^void local_flush_tlb_all(void)$/;"	f
lockdep_trace_alloc	page_alloc.c	1217;"	d	file:
lowmem_limit	mmu.c	/^phys_addr_t lowmem_limit = 0;$/;"	v
map_lowmem	mmu.c	/^void __init map_lowmem(void)$/;"	f
mark_bootmem	bootmem.c	/^static int __init mark_bootmem(unsigned long start,unsigned long end,$/;"	f	file:
mark_bootmem_node	bootmem.c	/^static int __init mark_bootmem_node(bootmem_data_t *bdata,$/;"	f	file:
max_low_pfn	bootmem.c	/^unsigned long max_low_pfn;$/;"	v
max_mapnr	memory.c	/^unsigned long max_mapnr;$/;"	v
max_pfn	bootmem.c	/^unsigned long max_pfn;$/;"	v
mem_cgroup	memcontrol.c	/^struct mem_cgroup {$/;"	s	file:
mem_cgroup_subsys	memcontrol.c	/^struct cgroup_subsys mem_cgroup_subsys = {$/;"	v	typeref:struct:cgroup_subsys
mem_init	init.c	/^void __init mem_init(void)$/;"	f
mem_map	memory.c	/^struct page *mem_map;$/;"	v	typeref:struct:page
mem_types	mmu.c	/^static struct mem_type mem_types[] = {$/;"	v	typeref:struct:mem_type	file:
memblock	memblock.c	/^struct memblock memblock = {$/;"	v	typeref:struct:memblock
memblock_add	memblock.c	/^long __init_memblock memblock_add(phys_addr_t base,phys_addr_t size)$/;"	f
memblock_add_region	memblock.c	/^static int memblock_add_region(struct memblock_type *type,$/;"	f	file:
memblock_adjacent_addr	memblock.c	/^static long __init_memblock memblock_adjacent_addr(phys_addr_t base1,$/;"	f	file:
memblock_align_down	memblock.c	/^static phys_addr_t memblock_align_down(phys_addr_t addr,$/;"	f	file:
memblock_align_up	memblock.c	/^static phys_addr_t memblock_align_up(phys_addr_t addr,phys_addr_t align)$/;"	f	file:
memblock_alloc	memblock.c	/^phys_addr_t memblock_alloc(phys_addr_t size,phys_addr_t align)$/;"	f
memblock_alloc_base	memblock.c	/^static phys_addr_t memblock_alloc_base(phys_addr_t size,phys_addr_t align,$/;"	f	file:
memblock_analyze	memblock.c	/^void __init memblock_analyze(void)$/;"	f
memblock_coalesce_regions	memblock.c	/^static void memblock_coalesce_regions(struct memblock_type *type,$/;"	f	file:
memblock_dump	memblock.c	/^static void __init_memblock memblock_dump(struct memblock_type *type,$/;"	f	file:
memblock_dump_all	memblock.c	/^void __init_memblock memblock_dump_all(void)$/;"	f
memblock_find_base	memblock.c	/^static phys_addr_t __init_memblock memblock_find_base(phys_addr_t size,$/;"	f	file:
memblock_find_region	memblock.c	/^static phys_addr_t memblock_find_region(phys_addr_t start,phys_addr_t end,$/;"	f	file:
memblock_init	memblock.c	/^void __init memblock_init(void)$/;"	f
memblock_memory_can_coalesce	memblock.c	/^static int memblock_memory_can_coalesce(phys_addr_t addr1,$/;"	f	file:
memblock_overlaps_addr	memblock.c	/^static int memblock_overlaps_addr(phys_addr_t base1,phys_addr_t size1,$/;"	f	file:
memblock_overlaps_region	memblock.c	/^static int memblock_overlaps_region(struct memblock_type *type,$/;"	f	file:
memblock_regions_adjacent	memblock.c	/^static long memblock_regions_adjacent(struct memblock_type *type,$/;"	f	file:
memblock_remove_region	memblock.c	/^static void __init_memblock memblock_remove_region(struct memblock_type *type,$/;"	f	file:
memblock_reserve	memblock.c	/^int memblock_reserve(phys_addr_t base,phys_addr_t size)$/;"	f
memblock_set_current_limit	memblock.c	/^void memblock_set_current_limit(phys_addr_t limit)$/;"	f
memmap_init	page_alloc.c	283;"	d	file:
min_low_pfn	bootmem.c	/^unsigned long min_low_pfn;$/;"	v
mm_init_owner	fork.c	/^void mm_init_owner(struct mm_struct *mm,struct task_struct *p)$/;"	f
mminit_loglevel	mm_init.c	/^int mminit_loglevel;$/;"	v
mminit_verify_page_links	mm_init.c	/^void __meminit mminit_verify_page_links(struct page *page,enum zone_type zone,$/;"	f
mminit_verify_zonelist	mm_init.c	/^void mminit_verify_zonelist(void)$/;"	f
mod_zone_page_state	vmstat.c	/^void mod_zone_page_state(struct zone *zone,enum zone_stat_item item,$/;"	f
move_freepages	page_alloc.c	/^static int move_freepages(struct zone *zone,$/;"	f	file:
move_freepages_block	page_alloc.c	/^static int move_freepages_block(struct zone *zone,struct page *page,$/;"	f	file:
new_slab	slub.c	/^static struct page *new_slab(struct kmem_cache *s,gfp_t flags,int node)$/;"	f	file:
next_online_pgdat	mmzone.c	/^struct pglist_data *next_online_pgdat(struct pglist_data *pgdat)$/;"	f
next_zone	mmzone.c	/^struct zone *next_zone(struct zone *zone)$/;"	f
next_zones_zonelist	mmzone.c	/^struct zoneref *next_zones_zonelist(struct zoneref *z,$/;"	f
node_match	slub.c	/^static inline int node_match(struct kmem_cache_cpu *c,int node)$/;"	f	file:
node_nr_objs	slub.c	/^static inline unsigned long node_nr_objs(struct kmem_cache_node *n)$/;"	f	file:
node_nr_slabs	slub.c	/^static inline unsigned long node_nr_slabs(struct kmem_cache_node *n)$/;"	f	file:
nr_all_pages	page_alloc.c	/^static unsigned long __meminitdata nr_all_pages;$/;"	v	file:
nr_kernel_pages	page_alloc.c	/^static unsigned long __meminitdata nr_kernel_pages;$/;"	v	file:
nr_swap_pages	swap_state.c	/^long nr_swap_pages;$/;"	v
nr_swapfiles	swap_state.c	/^static unsigned int nr_swapfiles;$/;"	v	file:
num_physpages	memory.c	/^unsigned long num_physpages;$/;"	v
object_err	slub.c	/^static void object_err(struct kmem_cache *s,struct page *page,$/;"	f	file:
on_freelist	slub.c	/^static int on_freelist(struct kmem_cache *s,struct page *page,void search)$/;"	f	file:
oo_make	slub.c	/^static inline struct kmem_cache_order_objects oo_make(int order,$/;"	f	file:
oo_objects	slub.c	/^static inline int oo_objects(struct kmem_cache_order_objects x)$/;"	f	file:
oo_order	slub.c	/^static inline int oo_order(struct kmem_cache_order_objects x)$/;"	f	file:
page	highmem.c	/^	struct page *page;$/;"	m	struct:page_address_map	typeref:struct:page_address_map::page	file:
page_address	highmem.c	/^void *page_address(struct page *page)$/;"	f
page_address_htable	highmem.c	/^} page_address_htable[1 << PA_HASH_ORDER];$/;"	v	typeref:struct:page_address_slot	file:
page_address_init	highmem.c	/^void __init page_address_init(void)$/;"	f
page_address_map	highmem.c	/^struct page_address_map {$/;"	s	file:
page_address_maps	highmem.c	/^static struct page_address_map page_address_maps[LAST_PKMAP];$/;"	v	typeref:struct:page_address_map	file:
page_address_pool	highmem.c	/^static struct list_head page_address_pool;  \/* freelist *\/$/;"	v	typeref:struct:list_head	file:
page_address_slot	highmem.c	/^static struct page_address_slot {$/;"	s	file:
page_alloc_cpu_notify	page_alloc.c	/^static int page_alloc_cpu_notify(void) {}$/;"	f	file:
page_cgroup_init_flatmem	page_cgroup.c	/^void __init page_cgroup_init_flatmem(void)$/;"	f
page_group_by_mobility_disabled	mmzone.c	/^int page_group_by_mobility_disabled;$/;"	v
page_is_buddy	page_alloc.c	/^static inline int page_is_buddy(struct page *page,struct page *buddy,$/;"	f	file:
page_is_consistent	page_alloc.c	/^static int page_is_consistent(struct zone *zone,struct page *page)$/;"	f	file:
page_outside_zone_boundaries	page_alloc.c	/^static int page_outside_zone_boundaries(struct zone *zone,struct page *page)$/;"	f	file:
page_poison	debug-pagealloc.c	/^static inline int page_poison(struct page *page)$/;"	f	file:
page_slot	highmem.c	/^static struct page_address_slot *page_slot(struct page *page)$/;"	f	file:
pageflag_names	page_alloc.c	/^static struct trace_print_flags pageflag_names[] = {$/;"	v	typeref:struct:trace_print_flags	file:
paging_init	mmu.c	/^void __init paging_init(void)$/;"	f
pfn_to_mem	memblock.c	/^void *pfn_to_mem(unsigned int idx)$/;"	f
pgdat_page_cgroup_init	page_alloc.c	/^static inline void pgdat_page_cgroup_init(struct pglist_data *pgdat) {}$/;"	f	file:
pgdat_resize_init	page_alloc.c	/^static inline void pgdat_resize_init(struct pglist_data *pgdat) {}$/;"	f	file:
pgprot_kernel	mmu.c	/^pgprot_t pgprot_kernel;$/;"	v
pgprot_user	mmu.c	/^pgprot_t pgprot_user;$/;"	v
pid	slub.c	/^	int pid;$/;"	m	struct:track	file:
pkmap_count	highmem.c	/^static int pkmap_count[LAST_PKMAP];$/;"	v	file:
pkmap_page_table	highmem.c	/^pte_t *pkmap_page_table;$/;"	v
pmd	mmu.c	/^	unsigned int pmd;$/;"	m	struct:cachepolicy	file:
poison_highpage	debug-pagealloc.c	/^static void poison_highpage(struct page *page)$/;"	f	file:
poison_page	debug-pagealloc.c	/^static void poison_page(struct page *page)$/;"	f	file:
poison_pages	debug-pagealloc.c	/^static void poison_pages(struct page *page,int n)$/;"	f	file:
policy	mmu.c	/^	const char policy[16];$/;"	m	struct:cachepolicy	file:
prep_compound_page	page_alloc.c	/^void prep_compound_page(struct page *page,unsigned long order)$/;"	f
prep_new_page	page_alloc.c	/^static int prep_new_page(struct page *page,int order,gfp_t gfp_flags)$/;"	f	file:
prep_zero_page	page_alloc.c	/^static inline void prep_zero_page(struct page *page,int order,$/;"	f	file:
prepare_page_table	mmu.c	/^static inline void prepare_page_table(void)$/;"	f	file:
print_page_info	slub.c	/^static void print_page_info(struct page *page)$/;"	f	file:
print_section	slub.c	/^static void print_section(char *text,u8 *addr,unsigned int length)$/;"	f	file:
print_track	slub.c	/^static void print_track(const char *s,struct track *t)$/;"	f	file:
print_tracking	slub.c	/^static void print_tracking(struct kmem_cache *s,void *object)$/;"	f	file:
print_trailer	slub.c	/^static void print_trailer(struct kmem_cache *s,struct page *page,u8 *p)$/;"	f	file:
protection_map	mmap.c	/^pgprot_t protection_map[16] = {$/;"	v
pte	mmu.c	/^	pteval_t pte;$/;"	m	struct:cachepolicy	file:
rcu_free_slab	slub.c	/^static void rcu_free_slab(struct rcu_head *h)$/;"	f	file:
reserve_bootmem	bootmem.c	/^int __init reserve_bootmem(unsigned long addr,unsigned long size,$/;"	f
restore_bytes	slub.c	/^static void restore_bytes(struct kmem_cache *s,char *message,u8 data,$/;"	f	file:
rmqueue_bulk	page_alloc.c	/^static int rmqueue_bulk(struct zone *zone,unsigned int order,$/;"	f	file:
rmv_page_order	page_alloc.c	/^static inline void rmv_page_order(struct page *page)$/;"	f	file:
sanity_check_meminfo	mmu.c	/^static void __init sanity_check_meminfo(void)$/;"	f	file:
set_freepointer	slub.c	/^static inline void set_freepointer(struct kmem_cache *s,void *object,void *fp)$/;"	f	file:
set_page_order	page_alloc.c	/^static inline void set_page_order(struct page *page,int order)$/;"	f	file:
set_page_poison	debug-pagealloc.c	/^static inline set_page_poison(struct page *page)$/;"	f	file:
set_pageblock_order	page_alloc.c	112;"	d	file:
set_pte_ext	mmu.c	/^void set_pte_ext(phys_addr_t addr,unsigned long pte)$/;"	f
setup_object	slub.c	/^static void setup_object(struct kmem_cache *s,struct page *page,$/;"	f	file:
setup_object_debug	slub.c	/^static void setup_object_debug(struct kmem_cache *s,struct page *page,$/;"	f	file:
should_fail_alloc_page	page_alloc.c	/^static inline int should_fail_alloc_page(gfp_t gfp_mask,unsigned int order)$/;"	f	file:
show_mem	init.c	/^void show_mem(void)$/;"	f
show_swap_cache_info	swap_state.c	/^void show_swap_cache_info(void)$/;"	f
slab_alloc	slub.c	/^static void *slab_alloc(struct kmem_cache *s,$/;"	f	file:
slab_bug	slub.c	/^static void slab_bug(struct kmem_cache *s,char *fmt,...)$/;"	f	file:
slab_err	slub.c	/^static void slab_err(struct kmem_cache *s,struct page *page,char *fmt,...)$/;"	f	file:
slab_lock	slub.c	/^static inline void slab_lock(struct page *page)$/;"	f	file:
slab_order	slub.c	/^static inline int slab_order(int size,int min_objects,$/;"	f	file:
slab_out_of_memory	slub.c	/^static void slab_out_of_memory(struct kmem_cache *s,$/;"	f	file:
slab_pad_check	slub.c	/^static int slab_pad_check(struct kmem_cache *s,struct page *page)$/;"	f	file:
slab_per_alloc_hook	slub.c	/^static inline int slab_per_alloc_hook(struct kmem_cache *s,$/;"	f	file:
slab_unlock	slub.c	/^static inline void slab_unlock(struct page *page)$/;"	f	file:
slub_debug	slub.c	/^static int slub_debug = DEBUG_DEFAULT_FLAGS;$/;"	v	file:
slub_debug_slabs	slub.c	/^static char *slub_debug_slabs;$/;"	v	file:
slub_max_order	slub.c	/^static int slub_max_order = PAGE_ALLOC_COSTLY_ORDER;$/;"	v	file:
slub_min_objects	slub.c	/^static int slub_min_objects;$/;"	v	file:
slub_min_order	slub.c	/^static int slub_min_order;$/;"	v	file:
spin_lock_init	page_alloc.c	/^static inline void spin_lock_init(struct zone *zone) {}$/;"	f	file:
stat	slub.c	/^static inline void stat(struct kmem_cache *s,enum stat_item si)$/;"	f	file:
swap_cache_info	swap_state.c	/^} swap_cache_info;$/;"	v	typeref:struct:__anon1	file:
sysctl_overcommit_memory	mmap.c	/^int sysctl_overcommit_memory = OVERCOMMIT_GUESS;  \/* heuristic overcommit *\/$/;"	v
top_pmd	mmu.c	/^pmd_t *top_pmd;$/;"	v
total_swap_pages	swap_state.c	/^long total_swap_pages;$/;"	v
total_usage	page_cgroup.c	/^static unsigned long total_usage;$/;"	v	file:
totalhigh_pages	memory.c	/^unsigned long totalhigh_pages;$/;"	v
totalram_pages	memory.c	/^unsigned long totalram_pages;$/;"	v
trace_mm_page_free_trace	page_alloc.c	/^static inline void trace_mm_page_free_trace(struct page *p,int order) {}$/;"	f	file:
track	slub.c	/^struct track {$/;"	s	file:
track_item	slub.c	/^enum track_item {$/;"	g	file:
unfreeze_slab	slub.c	/^static void unfreeze_slab(struct kmem_cache *s,struct page *page,int tail)$/;"	f	file:
unpoison_highpage	debug-pagealloc.c	/^static void unpoison_highpage(struct page *page)$/;"	f	file:
unpoison_page	debug-pagealloc.c	/^static void unpoison_page(struct page *page)$/;"	f	file:
unpoison_pages	debug-pagealloc.c	/^static void unpoison_pages(struct page *page,int n)$/;"	f	file:
vectors_page	traps.c	/^void *vectors_page;$/;"	v
virtual	highmem.c	/^	void *virtual;$/;"	m	struct:page_address_map	file:
vm_total_pages	vmscan.c	/^long vm_total_pages; \/* The total number of pages which the VM controls*\/$/;"	v
vmalloc_min	mmu.c	/^void *vmalloc_min = (void *)(VMALLOC_END - SZ_128M);$/;"	v
wait	page_alloc.c	/^	const gfp_t wait = gfp_mask & __GFP_WAIT;$/;"	v
wake_all_kswapd	page_alloc.c	/^static inline void wake_all_kswapd(unsigned int order,$/;"	f	file:
when	slub.c	/^	unsigned long when; \/* When did the operation *\/$/;"	m	struct:track	file:
zlc_mark_zone_full	page_alloc.c	/^static void zlc_mark_zone_full(struct zonelist *zonelist,struct zoneref *z)$/;"	f	file:
zlc_setup	page_alloc.c	/^static nodemask_t *zlc_setup(struct zonelist *zonelist,int alloc_flags)$/;"	f	file:
zlc_zone_worth_trying	page_alloc.c	/^static int zlc_zone_worth_trying(struct zonelist *zonelist,struct zoneref *z,$/;"	f	file:
zone_names	page_alloc.c	/^static char *const zone_names[MAX_NR_ZONES] = {$/;"	v	file:
zone_pcp_init	page_alloc.c	/^static inline void zone_pcp_init(struct zone *zone) {}$/;"	f	file:
zone_seqlock_init	page_alloc.c	/^static inline void zone_seqlock_init(struct zone *zone) {}$/;"	f	file:
zone_watermark_ok	page_alloc.c	/^bool zone_watermark_ok(struct zone *z,int order,unsigned long mark,$/;"	f
zonelist_order_name	page_alloc.c	/^static char zonelist_order_name[3][8] = {"Default","Node","Zone"};$/;"	v	file:
zref_in_nodemask	mmzone.c	/^static inline int zref_in_nodemask(struct zoneref *zref,nodemask_t *nodes)$/;"	f	file:
