!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALLOC_CPUSET	mm/page_alloc.c	42;"	d	file:
ALLOC_HARDER	mm/page_alloc.c	40;"	d	file:
ALLOC_HIGH	mm/page_alloc.c	41;"	d	file:
ALLOC_NO_WATERMARKS	mm/page_alloc.c	35;"	d	file:
ALLOC_WMARK_HIGH	mm/page_alloc.c	34;"	d	file:
ALLOC_WMARK_LOW	mm/page_alloc.c	33;"	d	file:
ALLOC_WMARK_MASK	mm/page_alloc.c	38;"	d	file:
ALLOC_WMARK_MIN	mm/page_alloc.c	32;"	d	file:
ARCH_LOW_ADDRESS_LIMIT	mm/bootmem.c	26;"	d	file:
BITMAP_show	debug.c	/^void BITMAP_show(unsigned int *bitmap,unsigned long bits)$/;"	f
BK_show	debug.c	/^void BK_show(char *s)$/;"	f
BOOT_PARAMS_SIZE	kernel/atags.c	5;"	d	file:
B_show	debug.c	/^void B_show(char *s)$/;"	f
CONFIG_CMDLINE	kernel/setup.c	99;"	d	file:
CPOLICY_BUFFERED	mm/mmu.c	26;"	d	file:
CPOLICY_UNCACHED	mm/mmu.c	25;"	d	file:
CPOLICY_WRITEALLOC	mm/mmu.c	29;"	d	file:
CPOLICY_WRITEBACK	mm/mmu.c	28;"	d	file:
CPOLICY_WRITETHROUGH	mm/mmu.c	27;"	d	file:
DEBUG_DEFAULT_FLAGS	mm/slub.c	117;"	d	file:
DEBUG_METADATA_FLAGS	mm/slub.c	120;"	d	file:
DOWN	mm/slub.c	/^	DOWN,    \/* No slab functionality available *\/$/;"	e	enum:__anon6	file:
FLAG_RDLOAD	kernel/compat.c	14;"	d	file:
FLAG_RDPROMPT	kernel/compat.c	15;"	d	file:
FLAG_READONLY	kernel/compat.c	13;"	d	file:
FORMAT_TYPE_BYTE	mm/vsprintf.c	/^	FORMAT_TYPE_BYTE,$/;"	e	enum:format_type	file:
FORMAT_TYPE_CHAR	mm/vsprintf.c	/^	FORMAT_TYPE_CHAR,$/;"	e	enum:format_type	file:
FORMAT_TYPE_INT	mm/vsprintf.c	/^	FORMAT_TYPE_INT,$/;"	e	enum:format_type	file:
FORMAT_TYPE_INVALID	mm/vsprintf.c	/^	FORMAT_TYPE_INVALID,$/;"	e	enum:format_type	file:
FORMAT_TYPE_LONG	mm/vsprintf.c	/^	FORMAT_TYPE_LONG,$/;"	e	enum:format_type	file:
FORMAT_TYPE_LONG_LONG	mm/vsprintf.c	/^	FORMAT_TYPE_LONG_LONG,$/;"	e	enum:format_type	file:
FORMAT_TYPE_NONE	mm/vsprintf.c	/^	FORMAT_TYPE_NONE,  \/* just a string part *\/$/;"	e	enum:format_type	file:
FORMAT_TYPE_NRCHARS	mm/vsprintf.c	/^	FORMAT_TYPE_NRCHARS,$/;"	e	enum:format_type	file:
FORMAT_TYPE_PERCENT_CHAR	mm/vsprintf.c	/^	FORMAT_TYPE_PERCENT_CHAR,$/;"	e	enum:format_type	file:
FORMAT_TYPE_PERCISION	mm/vsprintf.c	/^	FORMAT_TYPE_PERCISION,$/;"	e	enum:format_type	file:
FORMAT_TYPE_PTR	mm/vsprintf.c	/^	FORMAT_TYPE_PTR,$/;"	e	enum:format_type	file:
FORMAT_TYPE_PTRDIFF	mm/vsprintf.c	/^	FORMAT_TYPE_PTRDIFF$/;"	e	enum:format_type	file:
FORMAT_TYPE_SHORT	mm/vsprintf.c	/^	FORMAT_TYPE_SHORT,$/;"	e	enum:format_type	file:
FORMAT_TYPE_SIZE_T	mm/vsprintf.c	/^	FORMAT_TYPE_SIZE_T,$/;"	e	enum:format_type	file:
FORMAT_TYPE_STR	mm/vsprintf.c	/^	FORMAT_TYPE_STR,$/;"	e	enum:format_type	file:
FORMAT_TYPE_UBYTE	mm/vsprintf.c	/^	FORMAT_TYPE_UBYTE,$/;"	e	enum:format_type	file:
FORMAT_TYPE_UINT	mm/vsprintf.c	/^	FORMAT_TYPE_UINT,$/;"	e	enum:format_type	file:
FORMAT_TYPE_ULONG	mm/vsprintf.c	/^	FORMAT_TYPE_ULONG,$/;"	e	enum:format_type	file:
FORMAT_TYPE_USHORT	mm/vsprintf.c	/^	FORMAT_TYPE_USHORT,$/;"	e	enum:format_type	file:
FORMAT_TYPE_WIDTH	mm/vsprintf.c	/^	FORMAT_TYPE_WIDTH,$/;"	e	enum:format_type	file:
K	mm/page_alloc.c	2173;"	d	file:
LEFT	mm/vsprintf.c	11;"	d	file:
MAX_OBJS_PER_PAGE	mm/slub.c	147;"	d	file:
MAX_PARTIAL	mm/slub.c	40;"	d	file:
MEM0_OFFSET	boot_arch.c	/^unsigned int MEM0_OFFSET;$/;"	v
MEM1_OFFSET	boot_arch.c	/^unsigned int MEM1_OFFSET;$/;"	v
MEM_SIZE	kernel/setup.c	72;"	d	file:
MIN_PARTIAL	mm/slub.c	34;"	d	file:
MLK	mm/init.c	333;"	d	file:
MLK	mm/init.c	368;"	d	file:
MLK_ROUNDUP	mm/init.c	335;"	d	file:
MLK_ROUNDUP	mm/init.c	370;"	d	file:
MLM	mm/init.c	334;"	d	file:
MLM	mm/init.c	369;"	d	file:
M_show	debug.c	/^void M_show(phys_addr_t start,phys_addr_t end)$/;"	f
NR_CPUS	mm/vmalloc.c	55;"	d	file:
OO_MASK	mm/slub.c	146;"	d	file:
OO_SHIFT	mm/slub.c	145;"	d	file:
PARTIAL	mm/slub.c	/^	PARTIAL, \/* Kmem_cache_node works *\/$/;"	e	enum:__anon6	file:
PA_HASH_ORDER	mm/highmem.c	15;"	d	file:
PCPU_DFL_MAP_ALLOC	mm/percpu.c	17;"	d	file:
PCPU_SLOT_BASE_SHIFT	mm/percpu.c	16;"	d	file:
PLUS	mm/vsprintf.c	9;"	d	file:
PROT_PTE_DEVICE	mm/mmu.c	31;"	d	file:
PROT_SECT_DEVICE	mm/mmu.c	32;"	d	file:
PageCompound	mm/page_alloc.c	124;"	d	file:
RADIX_TREE_INDEX_BITS	mm/radix-tree.c	34;"	d	file:
RADIX_TREE_MAP_MASK	mm/radix-tree.c	11;"	d	file:
RADIX_TREE_MAP_SHIFT	mm/radix-tree.c	8;"	d	file:
RADIX_TREE_MAP_SIZE	mm/radix-tree.c	10;"	d	file:
RADIX_TREE_MAX_PATH	mm/radix-tree.c	35;"	d	file:
RADIX_TREE_TAG_LONGS	mm/radix-tree.c	13;"	d	file:
R_show	debug.c	/^void R_show(char *s)$/;"	f
SIGN	mm/vsprintf.c	8;"	d	file:
SLAB_DEBUG_FLAGS	mm/slub.c	123;"	d	file:
SMALL	mm/vsprintf.c	12;"	d	file:
SPACE	mm/vsprintf.c	10;"	d	file:
SPECIAL	mm/vsprintf.c	13;"	d	file:
ST_bootmem_data	debug.c	/^void ST_bootmem_data(struct bootmem_data *bdata)$/;"	f
ST_node_zones	debug.c	/^void ST_node_zones(struct zone *zone,int nr)$/;"	f
ST_page	debug.c	/^void ST_page(struct page *page)$/;"	f
ST_pglist_data	debug.c	/^void ST_pglist_data(void)$/;"	f
ST_zone	debug.c	/^void ST_zone(struct zone *zone)$/;"	f
ST_zone_reclaim_stat	debug.c	/^void ST_zone_reclaim_stat(struct zone_reclaim_stat *zr)$/;"	f
ST_zonelist	debug.c	/^void ST_zonelist(struct zonelist *zl)$/;"	f
ST_zonelist_cache	debug.c	/^void ST_zonelist_cache(struct zonelist_cache *zc)$/;"	f
SYSFS	mm/slub.c	/^	SYSFS    \/* Sysfs up *\/$/;"	e	enum:__anon6	file:
TOLOWER	mm/vsprintf.c	5;"	d	file:
TRACK_ALLOC	mm/slub.c	/^	TRACK_ALLOC,$/;"	e	enum:track_item	file:
TRACK_FREE	mm/slub.c	/^	TRACK_FREE$/;"	e	enum:track_item	file:
UP	mm/slub.c	/^	UP,      \/* Everything works but does not show up in sysfs *\/$/;"	e	enum:__anon6	file:
VMALLOC_PAGES	mm/vmalloc.c	43;"	d	file:
VMALLOC_SPACE	mm/vmalloc.c	41;"	d	file:
VMAP_BBMAP_BITS	mm/vmalloc.c	49;"	d	file:
VMAP_BBMAP_BITS_MAX	mm/vmalloc.c	45;"	d	file:
VMAP_BBMAP_BITS_MIN	mm/vmalloc.c	46;"	d	file:
VMAP_BLOCK_SIZE	mm/vmalloc.c	52;"	d	file:
VMAP_MAX	mm/vmalloc.c	48;"	d	file:
VMAP_MAX_ALLOC	mm/vmalloc.c	44;"	d	file:
VMAP_MIN	mm/vmalloc.c	47;"	d	file:
VM_LAZY_FREE	mm/vmalloc.c	33;"	d	file:
VM_LAZY_FREEING	mm/vmalloc.c	34;"	d	file:
VM_VM_AREA	mm/vmalloc.c	35;"	d	file:
V_show	debug.c	/^void V_show(void *addr,unsigned long size)$/;"	f
ZEROPAD	mm/vsprintf.c	7;"	d	file:
ZONELIST_ORDER_DEFAULT	mm/page_alloc.c	56;"	d	file:
ZONELIST_ORDER_NODE	mm/page_alloc.c	57;"	d	file:
ZONELIST_ORDER_ZONE	mm/page_alloc.c	58;"	d	file:
__B_show	debug.c	/^void __B_show(unsigned long *bitmap,char *s)$/;"	f
__ClearPageHead	mm/page_alloc.c	123;"	d	file:
__OBJECT_POISON	mm/slub.c	143;"	d	file:
__P000	mm/mmap.c	13;"	d	file:
__P001	mm/mmap.c	14;"	d	file:
__P010	mm/mmap.c	15;"	d	file:
__P011	mm/mmap.c	16;"	d	file:
__P100	mm/mmap.c	17;"	d	file:
__P101	mm/mmap.c	18;"	d	file:
__P110	mm/mmap.c	19;"	d	file:
__P111	mm/mmap.c	20;"	d	file:
__R_show	debug.c	/^void __R_show(struct memblock_type *type,char *type_name,char *s)$/;"	f
__S000	mm/mmap.c	22;"	d	file:
__S001	mm/mmap.c	23;"	d	file:
__S010	mm/mmap.c	24;"	d	file:
__S011	mm/mmap.c	25;"	d	file:
__S100	mm/mmap.c	26;"	d	file:
__S101	mm/mmap.c	27;"	d	file:
__S110	mm/mmap.c	28;"	d	file:
__S111	mm/mmap.c	29;"	d	file:
___alloc_bootmem	mm/bootmem.c	/^static void * __init ___alloc_bootmem(unsigned long size,unsigned long align,$/;"	f	file:
___alloc_bootmem_node	mm/bootmem.c	/^static void * __init ___alloc_bootmem_node(struct bootmem_data *bdata,$/;"	f	file:
___alloc_bootmem_nopanic	mm/bootmem.c	/^static void * __init ___alloc_bootmem_nopanic(unsigned long size,$/;"	f	file:
__addr_to_pcpu_ptr	mm/percpu.c	62;"	d	file:
__alloc_bootmem_low	mm/bootmem.c	/^void * __init __alloc_bootmem_low(unsigned long size,unsigned long align,$/;"	f
__alloc_bootmem_node	mm/bootmem.c	/^void * __init __alloc_bootmem_node(struct pglist_data *pgdat,$/;"	f
__alloc_bootmem_node_nopanic	mm/bootmem.c	/^void * __init __alloc_bootmem_node_nopanic(struct pglist_data *pgdat,$/;"	f
__alloc_bootmem_nopanic	mm/bootmem.c	/^void * __init __alloc_bootmem_nopanic(unsigned long size,unsigned long align,$/;"	f
__alloc_pages_direct_compact	mm/page_alloc.c	/^static inline struct page *__alloc_pages_direct_compact(gfp_t gfp_mask,$/;"	f	file:
__alloc_pages_high_priority	mm/page_alloc.c	/^static inline struct page *__alloc_pages_high_priority($/;"	f	file:
__alloc_pages_nodemask	mm/page_alloc.c	/^struct page *__alloc_pages_nodemask(gfp_t gfp_mask,unsigned int order,$/;"	f
__alloc_pages_slowpath	mm/page_alloc.c	/^static inline struct page *__alloc_pages_slowpath(gfp_t gfp_mask,$/;"	f	file:
__alloc_percpu	mm/percpu.c	/^void __percpu *__alloc_percpu(size_t size,size_t align)$/;"	f
__build_all_zonelist	mm/page_alloc.c	/^static __init_refok int __build_all_zonelist(void *data)$/;"	f	file:
__dec_zone_page_state	mm/vmstat.c	/^void __dec_zone_page_state(struct page *page,enum zone_stat_item item)$/;"	f
__find_buddy_index	mm/page_alloc.c	/^static inline unsigned long __find_buddy_index(unsigned long page_idx,$/;"	f	file:
__find_vmap_area	mm/vmalloc.c	/^static struct vmap_area *__find_vmap_area(unsigned long addr)$/;"	f	file:
__free	mm/bootmem.c	/^static void __init __free(struct bootmem_data *bdata,$/;"	f	file:
__free_one_page	mm/page_alloc.c	/^static inline void __free_one_page(struct page *page,$/;"	f	file:
__free_pages	mm/page_alloc.c	/^void __free_pages(struct page *page,unsigned long order)$/;"	f
__free_pages_bootmem	mm/page_alloc.c	/^void __meminit __free_pages_bootmem(struct page *page,unsigned int order)$/;"	f
__free_pages_ok	mm/page_alloc.c	/^static void __free_pages_ok(struct page *page,unsigned int order)$/;"	f	file:
__free_slab	mm/slub.c	/^static void __free_slab(struct kmem_cache *s,struct page *page)$/;"	f	file:
__free_vmap_area	mm/vmalloc.c	/^static void __free_vmap_area(struct vmap_area *va)$/;"	f	file:
__get_free_pages	mm/page_alloc.c	/^unsigned long __get_free_pages(gfp_t gfp_mask,unsigned int order)$/;"	f
__get_vm_area_node	mm/vmalloc.c	/^static struct vm_struct *__get_vm_area_node(unsigned long size,$/;"	f	file:
__init_page_cgroup	mm/page_cgroup.c	/^static void __meminit __init_page_cgroup(struct page_cgroup *pc,$/;"	f	file:
__initdata	kernel/setup.c	/^static char default_command_line[COMMAND_LINE_SIZE] __initdata = $/;"	v	file:
__initdata	kernel/setup.c	/^struct machine_desc *machine_desc __initdata;$/;"	v	typeref:struct:machine_desc
__initdata	kernel/setup.c	/^unsigned int __atags_pointer __initdata = 0;$/;"	v
__initdata	kernel/setup.c	/^} init_tags __initdata = {$/;"	v	typeref:struct:init_tags	file:
__initdata	mm/mmu.c	/^static struct cachepolicy cache_policies[] __initdata = {$/;"	v	typeref:struct:cache_policies	file:
__initdata	mm/mmu.c	/^static unsigned int cachepolicy __initdata = CPOLICY_WRITEBACK;$/;"	v	file:
__initdata	mm/mmu.c	/^static unsigned int ecc_mask __initdata = 0;$/;"	v	file:
__insert_vmap_area	mm/vmalloc.c	/^void __insert_vmap_area(struct vmap_area *va)$/;"	f
__kmalloc	mm/slub.c	/^void *__kmalloc(size_t size,gfp_t flags)$/;"	f
__kmalloc_node	mm/slub.c	/^void *__kmalloc_node(size_t size,gfp_t flags,int node)$/;"	f
__kmp_atomic_idx	mm/highmem.c	/^int __kmp_atomic_idx;$/;"	v
__kunmap_atomic	mm/highmem.c	/^void __kunmap_atomic(void *kvaddr)$/;"	f
__memblock_alloc_base	mm/memblock.c	/^phys_addr_t __init __memblock_alloc_base(phys_addr_t size,phys_addr_t align,$/;"	f
__page_cache_release	mm/swap.c	/^static void __page_cache_release(struct page *page)$/;"	f	file:
__pcpu_map_pages	mm/percpu.c	/^static int __pcpu_map_pages(unsigned long addr,struct page **pages,$/;"	f	file:
__pcpu_ptr_to_addr	mm/percpu.c	63;"	d	file:
__pcpu_size_to_slot	mm/percpu.c	/^static int __pcpu_size_to_slot(int size)$/;"	f	file:
__pcpu_unmap_pages	mm/percpu.c	/^static void __pcpu_unmap_pages(unsigned long addr,int nr_pages)$/;"	f	file:
__pgd_error	mm/traps.c	/^void __pgd_error(const char *file,int line,pgd_t pgd)$/;"	f
__pte_alloc_kernel	mm/memory.c	/^int __pte_alloc_kernel(pmd_t *pmd,unsigned long address)$/;"	f
__purge_vmap_area_lazy	mm/vmalloc.c	/^static void __purge_vmap_area_lazy(unsigned long *start,unsigned long *end,$/;"	f	file:
__put_compound_page	mm/swap.c	/^static void __put_compound_page(struct page *page)$/;"	f	file:
__put_single_page	mm/swap.c	/^static void __put_single_page(struct page *page)$/;"	f	file:
__rb_erase_color	mm/rbtree.c	/^static void __rb_erase_color(struct rb_node *node,struct rb_node *parent,$/;"	f	file:
__rb_rotate_left	mm/rbtree.c	/^static void __rb_rotate_left(struct rb_node *node,struct rb_root *root)$/;"	f	file:
__rb_rotate_right	mm/rbtree.c	/^static void __rb_rotate_right(struct rb_node *node,struct rb_root *root)$/;"	f	file:
__read_mostly	mm/page_alloc.c	/^gfp_t gfp_allowed_mask __read_mostly = GFP_BOOT_MASK;$/;"	v
__read_mostly	mm/page_alloc.c	/^nodemask_t node_states[NR_NODE_STATES] __read_mostly = {$/;"	v
__read_mostly	mm/percpu.c	/^const unsigned long *pcpu_group_offsets __read_mostly;$/;"	v
__read_mostly	mm/percpu.c	/^const unsigned long *pcpu_uint_offsets __read_mostly;$/;"	v
__read_mostly	mm/percpu.c	/^const unsigned long *pcpu_unit_offsets __read_mostly; \/* cpu->unit offset *\/$/;"	v
__read_mostly	mm/percpu.c	/^int pcpu_atom_size  __read_mostly;$/;"	v
__read_mostly	mm/percpu.c	/^int pcpu_chunk_struct_size __read_mostly;$/;"	v
__read_mostly	mm/percpu.c	/^int pcpu_nr_groups __read_mostly;$/;"	v
__read_mostly	mm/percpu.c	/^int pcpu_nr_slots   __read_mostly;$/;"	v
__read_mostly	mm/percpu.c	/^int pcpu_nr_units   __read_mostly;$/;"	v
__read_mostly	mm/percpu.c	/^int pcpu_unit_pages __read_mostly;$/;"	v
__read_mostly	mm/percpu.c	/^int pcpu_unit_size  __read_mostly;$/;"	v
__read_mostly	mm/percpu.c	/^size_t *pcpu_group_sizes __read_mostly;$/;"	v
__read_mostly	mm/percpu.c	/^static const int *pcpu_unit_map __read_mostly;$/;"	v	file:
__read_mostly	mm/percpu.c	/^static struct list_head *pcpu_slot __read_mostly; \/* chunk list slots *\/$/;"	v	typeref:struct:pcpu_slot	file:
__read_mostly	mm/percpu.c	/^unsigned int pcpu_first_unit_cpu __read_mostly;$/;"	v
__read_mostly	mm/percpu.c	/^unsigned int pcpu_last_unit_cpu  __read_mostly;$/;"	v
__remove_partial	mm/slub.c	/^static inline void __remove_partial(struct kmem_cache_node *n,$/;"	f	file:
__request_resource	kernel/resource.c	/^static struct resource * __request_resource(struct resource *root,$/;"	f	file:
__reserve	mm/bootmem.c	/^static int __init __reserve(struct bootmem_data *bdata,unsigned long sidx,$/;"	f	file:
__rmqueue	mm/page_alloc.c	/^static struct page *__rmqueue(struct zone *zone,unsigned int order,$/;"	f	file:
__rmqueue_fallback	mm/page_alloc.c	/^static inline struct page *__rmqueue_fallback(struct zone *zone,$/;"	f	file:
__rmqueue_smallest	mm/page_alloc.c	/^static inline struct page *__rmqueue_smallest(struct zone *zone,$/;"	f	file:
__slab_alloc	mm/slub.c	/^static void *__slab_alloc(struct kmem_cache *s,gfp_t gfpflags,int node,$/;"	f	file:
__slab_free	mm/slub.c	/^static void __slab_free(struct kmem_cache *s,struct page *page,$/;"	f	file:
__vmalloc_area_node	mm/vmalloc.c	/^static void *__vmalloc_area_node(struct vm_struct *area,gfp_t gfp_mask,$/;"	f	file:
__vmalloc_node	mm/vmalloc.c	/^static void *__vmalloc_node(unsigned long size,unsigned long align,$/;"	f	file:
__vmalloc_node_flags	mm/vmalloc.c	/^static inline void *__vmalloc_node_flags(unsigned long size,$/;"	f	file:
__vmalloc_node_range	mm/vmalloc.c	/^void *__vmalloc_node_range(unsigned long size,unsigned long align,$/;"	f
__vunmap	mm/vmalloc.c	/^static void __vunmap(const void *addr,int deallocate_pages)$/;"	f	file:
__zone_watermark_ok	mm/page_alloc.c	/^static bool __zone_watermark_ok(struct zone *z,int order,unsigned long mark,$/;"	f	file:
_alloc_bootmem_nopanic	mm/bootmem.c	/^void * __init _alloc_bootmem_nopanic(unsigned long size,unsigned long align,$/;"	f
add_full	mm/slub.c	/^static void add_full(struct kmem_cache_node *n,struct page *page)$/;"	f	file:
add_partial	mm/slub.c	/^static void add_partial(struct kmem_cache_node *n,$/;"	f	file:
add_total	mm/swap_state.c	/^	unsigned long add_total;$/;"	m	struct:__anon5	file:
addr	mm/slub.c	/^	unsigned long addr;  \/* Called from address *\/$/;"	m	struct:track	file:
addr_to_vb_idx	mm/vmalloc.c	/^static unsigned long addr_to_vb_idx(unsigned long addr)$/;"	f	file:
adfsdrives	kernel/compat.c	/^			unsigned long adfsdrives;$/;"	m	struct:param_struct::__anon1::__anon2	file:
align_idx	mm/bootmem.c	/^static unsigned long __init align_idx(struct bootmem_data *bdata,$/;"	f	file:
align_off	mm/bootmem.c	/^static unsigned long __init align_off(struct bootmem_data *bdata,$/;"	f	file:
alloc_arch_preferred_bootmem	mm/bootmem.c	/^static void * __init alloc_arch_preferred_bootmem(struct bootmem_data *bdata,$/;"	f	file:
alloc_bootmem_core	mm/bootmem.c	/^static void * __init alloc_bootmem_core(struct bootmem_data *bdata,$/;"	f	file:
alloc_debug_processing	mm/slub.c	/^static int alloc_debug_processing(struct kmem_cache *s,struct page *page,$/;"	f	file:
alloc_init_pte	mm/mmu.c	/^void __init alloc_init_pte(pmd_t *pmd,unsigned long addr,$/;"	f
alloc_init_section	mm/mmu.c	/^void alloc_init_section(pgd_t *pgd,unsigned long addr,$/;"	f
alloc_kmem_cache_cpus	mm/slub.c	/^static inline int alloc_kmem_cache_cpus(struct kmem_cache *s)$/;"	f	file:
alloc_node_mem_map	mm/memblock.c	/^static void alloc_node_mem_map(struct pglist_data *pgdat)$/;"	f	file:
alloc_node_page_cgroup	mm/page_cgroup.c	/^static int __init alloc_node_page_cgroup(int nid)$/;"	f	file:
alloc_remap	mm/memblock.c	/^static inline void *alloc_remap(int nid,unsigned long size)$/;"	f	file:
alloc_slab_page	mm/slub.c	/^static inline struct page *alloc_slab_page(gfp_t flags,int node,$/;"	f	file:
alloc_vmap_area	mm/vmalloc.c	/^static struct vmap_area *alloc_vmap_area(unsigned long size,$/;"	f	file:
allocate_slab	mm/slub.c	/^static struct page *allocate_slab(struct kmem_cache *s,gfp_t flags,int node)$/;"	f	file:
any_tag_set	mm/radix-tree.c	/^static inline int any_tag_set(struct radix_tree_node *node,unsigned int tag)$/;"	f	file:
arm_bootmem_free	mm/memblock.c	/^void arm_bootmem_free(unsigned long min,unsigned long max_low,$/;"	f
arm_bootmem_init	mm/memblock.c	/^void arm_bootmem_init(unsigned int start_pfn,$/;"	f
arm_memblock_init	mm/init.c	/^void __init arm_memblock_init(struct meminfo *mi)$/;"	f
arm_mm_memblock_reserve	mm/mmu.c	/^void arm_mm_memblock_reserve(void)$/;"	f
atags_copy	kernel/atags.c	/^static char __initdata atags_copy[BOOT_PARAMS_SIZE];$/;"	v	file:
bad_page	mm/page_alloc.c	/^static void bad_page(struct page *page)$/;"	f	file:
bad_range	mm/page_alloc.c	/^static int bad_range(struct zone *zone,struct page *page)$/;"	f	file:
base	mm/vsprintf.c	/^	u8 base;          \/* number base,8,10 or 16 only *\/$/;"	m	struct:printf_spec	file:
bdata_list	mm/bootmem.c	/^struct list_head bdata_list = LIST_HEAD_INIT(bdata_list);$/;"	v	typeref:struct:list_head
boot_init_meminfo	boot_arch.c	/^static void boot_init_meminfo(void)$/;"	f	file:
bootmap_bytes	mm/memblock.c	/^static unsigned long bootmap_bytes(unsigned long pages)$/;"	f	file:
bootmem_arch_preferred_node	mm/bootmem.c	17;"	d	file:
bootmem_bootmap_pages	mm/memblock.c	/^unsigned long bootmem_bootmap_pages(unsigned long start_pfn,$/;"	f
bootmem_init	mm/init.c	/^void __init bootmem_init(void)$/;"	f
bootmem_node_data	mm/bootmem.c	/^struct bootmem_data bootmem_node_data[MAX_NUMNODES];$/;"	v	typeref:struct:bootmem_data
buddy_machine	kernel/setup.c	/^struct machine_desc buddy_machine = {$/;"	v	typeref:struct:machine_desc
buffered_rmqueue	mm/page_alloc.c	/^static inline struct page *buffered_rmqueue(struct zone *preferred_zone,$/;"	f	file:
build_all_zonelist	mm/page_alloc.c	/^void build_all_zonelist(void *data)$/;"	f
build_mem_type_table	mm/mmu.c	/^static void __init build_mem_type_table(void)$/;"	f	file:
build_tag_list	kernel/compat.c	/^static void __init build_tag_list(struct param_struct *params,void *taglist)$/;"	f	file:
build_zonelist_cache	mm/page_alloc.c	/^static void build_zonelist_cache(struct pglist_data *pgdat)$/;"	f	file:
build_zonelists	mm/page_alloc.c	/^static void build_zonelists(struct pglist_data *pgdat)$/;"	f	file:
build_zonelists_node	mm/page_alloc.c	/^static int build_zonelists_node(struct pglist_data *pgdat,$/;"	f	file:
bytes_per_char_h	kernel/compat.c	/^			unsigned long bytes_per_char_h;$/;"	m	struct:param_struct::__anon1::__anon2	file:
bytes_per_char_v	kernel/compat.c	/^			unsigned long bytes_per_char_v;$/;"	m	struct:param_struct::__anon1::__anon2	file:
cachepolicy	mm/mmu.c	/^struct cachepolicy {$/;"	s	file:
calculate_alignment	mm/slub.c	/^static unsigned long calculate_alignment(unsigned long flags,$/;"	f	file:
calculate_node_totalpages	mm/memblock.c	/^static void calculate_node_totalpages(struct pglist_data *pgdat,$/;"	f	file:
calculate_order	mm/slub.c	/^static inline int calculate_order(int size)$/;"	f	file:
calculate_sizes	mm/slub.c	/^static int calculate_sizes(struct kmem_cache *s,int forced_order)$/;"	f	file:
change_pageblock_range	mm/page_alloc.c	/^static void change_pageblock_range(struct page *pageblock_page,$/;"	f	file:
check_bytes	mm/slub.c	/^static u8 *check_bytes(u8 *start,unsigned int value,unsigned int bytes)$/;"	f	file:
check_highest_zone	mm/page_alloc.c	/^static inline void check_highest_zone(int k)$/;"	f	file:
check_new_page	mm/page_alloc.c	/^static inline int check_new_page(struct page *page)$/;"	f	file:
check_object	mm/slub.c	/^static inline int check_object(struct kmem_cache *s,struct page *page,$/;"	f	file:
check_poison_mem	mm/debug-pagealloc.c	/^static void check_poison_mem(unsigned char *mem,size_t bytes)$/;"	f	file:
check_slab	mm/slub.c	/^static int check_slab(struct kmem_cache *s,struct page *page)$/;"	f	file:
check_valid_pointer	mm/slub.c	/^static inline int check_valid_pointer(struct kmem_cache *s,$/;"	f	file:
clear_bit	bitmap.c	/^void clear_bit(int nr,unsigned int *byte)$/;"	f
clear_page_poison	mm/debug-pagealloc.c	/^static inline clear_page_poison(struct page *page)$/;"	f	file:
commandline	kernel/compat.c	/^	char commandline[COMMAND_LINE_SIZE];$/;"	m	struct:param_struct	file:
cont_free	mm/slub.c	/^static int cont_free(struct page *page)$/;"	f	file:
contig_pglist_data	mm/page_alloc.c	/^struct pglist_data contig_pglist_data = {$/;"	v	typeref:struct:pglist_data
convert_to_tag_list	kernel/compat.c	/^void __init convert_to_tag_list(struct tag *tags)$/;"	f
core	kernel/setup.c	/^	struct tag_core core;$/;"	m	struct:init_tags	typeref:struct:init_tags::tag_core	file:
count	mm/radix-tree.c	/^	unsigned int count;$/;"	m	struct:radix_tree_node	file:
count_free	mm/slub.c	/^static int count_free(struct page *page)$/;"	f	file:
count_partial	mm/slub.c	/^static unsigned long count_partial(struct kmem_cache_node *n,$/;"	f	file:
cpu	mm/slub.c	/^	int cpu;     \/* Was running on cpu *\/$/;"	m	struct:track	file:
cpu_architecture	kernel/setup.c	/^int cpu_architecture(void)$/;"	f
cpuset_init_current_mems_allowed	mm/page_alloc.c	/^static inline void cpuset_init_current_mems_allowed(void) {}$/;"	f	file:
cpuset_init_mems_allowed	mm/page_alloc.c	/^static inline void cpuset_init_mems_allowed(void) {}$/;"	f	file:
cr_mask	mm/mmu.c	/^	unsigned int cr_mask;$/;"	m	struct:cachepolicy	file:
create_36bit_mapping	mm/mmu.c	/^static void __init create_36bit_mapping(struct map_desc *md,$/;"	f	file:
create_kmalloc_cache	mm/slub.c	/^static struct kmem_cache *__init create_kmalloc_cache(const char *name,$/;"	f	file:
create_mapping	mm/mmu.c	/^void create_mapping(struct map_desc *md)$/;"	f
current_p	mm/sched.c	/^struct task_struct current_p;$/;"	v	typeref:struct:task_struct
current_thread	mm/sched.c	/^struct thread_info current_thread = {$/;"	v	typeref:struct:thread_info
current_zonelist_order	mm/page_alloc.c	/^static int current_zonelist_order = ZONELIST_ORDER_DEFAULT;$/;"	v	file:
deactive_slab	mm/slub.c	/^static void deactive_slab(struct kmem_cache *s,struct kmem_cache_cpu *c)$/;"	f	file:
dec_slabs_node	mm/slub.c	/^static inline void dec_slabs_node(struct kmem_cache *s,int node,int objects)$/;"	f	file:
default_memory	mm/memblock.c	/^struct memblock_region default_memory[INIT_MEMBLOCK_REGIONS + 1];$/;"	v	typeref:struct:memblock_region
default_reserved	mm/memblock.c	/^struct memblock_region default_reserved[INIT_MEMBLOCK_REGIONS + 1];$/;"	v	typeref:struct:memblock_region
del_total	mm/swap_state.c	/^	unsigned long del_total;$/;"	m	struct:__anon5	file:
destroy_compound_page	mm/page_alloc.c	/^static int destroy_compound_page(struct page *page,unsigned long order)$/;"	f	file:
devicemaps_init	mm/mmu.c	/^static void __init devicemaps_init(void)$/;"	f	file:
dirty	mm/vmalloc.c	/^	unsigned long free,dirty;$/;"	m	struct:vmap_block	file:
disable_higher_order_debug	mm/slub.c	/^static int disable_higher_order_debug;$/;"	v	file:
discard_slab	mm/slub.c	/^static void discard_slab(struct kmem_cache *s,struct page *page)$/;"	f	file:
dma_reserve	mm/page_alloc.c	/^static unsigned long __meminitdata dma_reserve;$/;"	v	file:
do_check	mm/test.c	/^int do_check(void)$/;"	f
dump_page	mm/page_alloc.c	/^void dump_page(struct page *page)$/;"	f
dump_page_flags	mm/page_alloc.c	/^static void dump_page_flags(unsigned long flags)$/;"	f	file:
dump_stack	mm/traps.c	/^void dump_stack(void)$/;"	f
early_alloc	mm/mmu.c	/^void *early_alloc(unsigned long size)$/;"	f
early_kmem_cache_node_alloc	mm/slub.c	/^static void early_kmem_cache_node_alloc(int node)$/;"	f	file:
early_parment	mm/init.c	/^void early_parment(void)$/;"	f
early_pte_alloc	mm/mmu.c	/^static pte_t * __init early_pte_alloc(pmd_t *pmd,unsigned long addr,$/;"	f	file:
early_vmalloc	mm/mmu.c	/^void early_vmalloc(void)$/;"	f
empty_zero_page	mm/mmu.c	/^struct page *empty_zero_page;$/;"	v	typeref:struct:page
expand	mm/page_alloc.c	/^static inline void expand(struct zone *zone,struct page *page,$/;"	f	file:
fallbacks	mm/page_alloc.c	/^static int fallbacks[MIGRATE_TYPES][MIGRATE_TYPES - 1] = {$/;"	v	file:
field_width	mm/vsprintf.c	/^	s16 field_width;  \/* width of output field *\/$/;"	m	struct:printf_spec	file:
find_limits	mm/init.c	/^void __init find_limits(unsigned int *min,unsigned int *max_low,$/;"	f
find_next_bit	bitmap.c	/^int find_next_bit(unsigned int *addr,unsigned long size,$/;"	f
find_next_zero_bit	bitmap.c	/^int find_next_zero_bit(unsigned int *byte,$/;"	f
find_success	mm/swap_state.c	/^	unsigned long find_success;$/;"	m	struct:__anon5	file:
find_total	mm/swap_state.c	/^	unsigned long find_total;$/;"	m	struct:__anon5	file:
find_vmap_area	mm/vmalloc.c	/^static struct vmap_area *find_vmap_area(unsigned long addr)$/;"	f	file:
first_online_pgdat	mm/mmzone.c	/^struct pglist_data *first_online_pgdat(void)$/;"	f
flags	kernel/compat.c	/^			unsigned long flags;$/;"	m	struct:param_struct::__anon1::__anon2	file:
flags	mm/vsprintf.c	/^	u8 flags;         \/* flags to number() *\/$/;"	m	struct:printf_spec	file:
flush_cache_all	mm/tlb.c	/^void flush_cache_all()$/;"	f
flush_slab	mm/slub.c	/^static inline void flush_slab(struct kmem_cache *s,struct kmem_cache_cpu *c)$/;"	f	file:
for_each_object	mm/slub.c	185;"	d	file:
format_decode	mm/vsprintf.c	/^static int format_decode(const char *fmt,struct printf_spec *spec)$/;"	f	file:
format_type	mm/vsprintf.c	/^enum format_type {$/;"	g	file:
free	mm/vmalloc.c	/^	struct list_head free;$/;"	m	struct:vmap_block_queue	typeref:struct:vmap_block_queue::list_head	file:
free	mm/vmalloc.c	/^	unsigned long free,dirty;$/;"	m	struct:vmap_block	file:
free_all_bootmem	mm/bootmem.c	/^unsigned long __init free_all_bootmem(void)$/;"	f
free_all_bootmem_core	mm/bootmem.c	/^static unsigned long __init free_all_bootmem_core(struct bootmem_data *bdata)$/;"	f	file:
free_area	mm/init.c	/^static inline int free_area(unsigned long pfn,unsigned long end,char *s)$/;"	f	file:
free_area_init_core	mm/page_alloc.c	/^void __paginginit free_area_init_core(struct pglist_data *pgdat,$/;"	f
free_area_init_node	mm/memblock.c	/^static void free_area_init_node(int nid,unsigned long *zone_sizes,$/;"	f	file:
free_bootmem	mm/bootmem.c	/^void __init free_bootmem(unsigned long addr,unsigned long size)$/;"	f
free_compound_page	mm/page_alloc.c	/^static void free_compound_page(struct page *page)$/;"	f	file:
free_debug_processing	mm/slub.c	/^static inline int free_debug_processing(struct kmem_cache *s,$/;"	f	file:
free_highpages	mm/init.c	/^static void __init free_highpages(void)$/;"	f	file:
free_hot_cold_page	mm/page_alloc.c	/^void free_hot_cold_page(struct page *page,int cold)$/;"	f
free_kmem_cache_nodes	mm/slub.c	/^static void free_kmem_cache_nodes(struct kmem_cache *s)$/;"	f	file:
free_list	mm/vmalloc.c	/^	struct list_head free_list;$/;"	m	struct:vmap_block	typeref:struct:vmap_block::list_head	file:
free_memmap	mm/init.c	/^static inline void free_memmap(unsigned long start_pfn,unsigned long end_pfn)$/;"	f	file:
free_one_page	mm/page_alloc.c	/^static void free_one_page(struct zone *zone,struct page *page,int order,$/;"	f	file:
free_page_mlock	mm/page_alloc.c	/^static inline void free_page_mlock(struct page *page)$/;"	f	file:
free_pages	mm/page_alloc.c	/^void free_pages(unsigned long addr,unsigned int order)$/;"	f
free_pages_check	mm/page_alloc.c	/^static inline int free_pages_check(struct page *page)$/;"	f	file:
free_pages_prepare	mm/page_alloc.c	/^static bool free_pages_prepare(struct page *page,unsigned int order)$/;"	f	file:
free_pcppages_bulk	mm/page_alloc.c	/^static void free_pcppages_bulk(struct zone *zone,int count,$/;"	f	file:
free_slab	mm/slub.c	/^static void free_slab(struct kmem_cache *s,struct page *page)$/;"	f	file:
free_unmap_vmap_area	mm/vmalloc.c	/^static void free_unmap_vmap_area(struct vmap_area *va)$/;"	f	file:
free_unmap_vmap_area_noflush	mm/vmalloc.c	/^static void free_unmap_vmap_area_noflush(struct vmap_area *va)$/;"	f	file:
free_unused_memmap	mm/init.c	/^static void __init free_unused_memmap(struct meminfo *mi)$/;"	f	file:
free_vmap_area_noflush	mm/vmalloc.c	/^static void free_vmap_area_noflush(struct vmap_area *va)$/;"	f	file:
free_vmap_block	mm/vmalloc.c	/^static void free_vmap_block(struct vmap_block *vb)$/;"	f	file:
get_any_partial	mm/slub.c	/^static struct page *get_any_partial(struct kmem_cache *s,gfp_t flags)$/;"	f	file:
get_cr1	register_simulate.c	/^u32 get_cr1(void)$/;"	f
get_cr2	register_simulate.c	/^u32 get_cr2(void)$/;"	f
get_freepointer	mm/slub.c	/^static inline void *get_freepointer(struct kmem_cache *s,void *object)$/;"	f	file:
get_node	mm/slub.c	/^static inline struct kmem_cache_node *get_node(struct kmem_cache *s,int node)$/;"	f	file:
get_page_from_freelist	mm/page_alloc.c	/^static struct page *get_page_from_freelist(gfp_t gfp_mask,$/;"	f	file:
get_pageblock_bitmap	mm/page_alloc.c	/^static inline unsigned long *get_pageblock_bitmap(struct zone *zone,$/;"	f	file:
get_pageblock_flags_group	mm/page_alloc.c	/^unsigned long get_pageblock_flags_group(struct page *page,$/;"	f
get_partial	mm/slub.c	/^static struct page *get_partial(struct kmem_cache *s,gfp_t flags,int node)$/;"	f	file:
get_partial_node	mm/slub.c	/^static struct page *get_partial_node(struct kmem_cache_node *n)$/;"	f	file:
get_slab	mm/slub.c	/^static struct kmem_cache *get_slab(size_t size,gfp_t flags)$/;"	f	file:
get_track	mm/slub.c	/^static struct track *get_track(struct kmem_cache *s,void *object,$/;"	f	file:
gfp_to_alloc_flags	mm/page_alloc.c	/^static inline int gfp_to_alloc_flags(gfp_t gfp_mask)$/;"	f	file:
hdr1	kernel/setup.c	/^	struct tag_header hdr1;$/;"	m	struct:init_tags	typeref:struct:init_tags::tag_header	file:
hdr2	kernel/setup.c	/^	struct tag_header hdr2;$/;"	m	struct:init_tags	typeref:struct:init_tags::tag_header	file:
hdr3	kernel/setup.c	/^	struct tag_header hdr3;$/;"	m	struct:init_tags	typeref:struct:init_tags::tag_header	file:
height	mm/radix-tree.c	/^	unsigned int height;    \/* Height from the bottom *\/$/;"	m	struct:radix_tree_node	file:
height_to_maxindex	mm/radix-tree.c	/^static unsigned long height_to_maxindex[RADIX_TREE_MAX_PATH + 1]; $/;"	v	file:
high_memory	mm/memory.c	/^void *high_memory;$/;"	v
high_to_low	debug.c	/^unsigned int high_to_low(unsigned int old)$/;"	f
highest_memmap_pfn	mm/nommu.c	/^unsigned long highest_memmap_pfn;$/;"	v
inc_slabs_node	mm/slub.c	/^static inline void inc_slabs_node(struct kmem_cache *s,int node,int objects)$/;"	f	file:
indirect_to_ptr	mm/radix-tree.c	/^static inline void *indirect_to_ptr(void *ptr)$/;"	f	file:
init_bootmem_core	mm/memblock.c	/^static unsigned long __init init_bootmem_core(struct bootmem_data *bdata,$/;"	f	file:
init_bootmem_node	mm/memblock.c	/^static long __init init_bootmem_node(struct pglist_data *pgdat,$/;"	f	file:
init_currently_empty_zone	mm/page_alloc.c	/^__meminit int init_currently_empty_zone(struct zone *zone,$/;"	f
init_kmem_cache_node	mm/slub.c	/^static void init_kmem_cache_node(struct kmem_cache_node *n,$/;"	f	file:
init_kmem_cache_nodes	mm/slub.c	/^static int init_kmem_cache_nodes(struct kmem_cache *s)$/;"	f	file:
init_mm	mm/init-mm.c	/^struct mm_struct init_mm = {$/;"	v	typeref:struct:mm_struct
init_object	mm/slub.c	/^static void init_object(struct kmem_cache *s,void *object,u8 val)$/;"	f	file:
init_tags	kernel/setup.c	/^static struct init_tags {$/;"	s	file:
init_task	kernel/init_task.c	/^struct task_struct init_task = {$/;"	v	typeref:struct:task_struct
init_waitqueue_head	mm/page_alloc.c	/^static inline void init_waitqueue_head(struct pglist_data *pgdat) {}$/;"	f	file:
initrd_size	kernel/compat.c	/^			unsigned long initrd_size;$/;"	m	struct:param_struct::__anon1::__anon2	file:
initrd_start	kernel/compat.c	/^			unsigned long initrd_start;$/;"	m	struct:param_struct::__anon1::__anon2	file:
insert_vmalloc_vm	mm/vmalloc.c	/^void insert_vmalloc_vm(struct vm_struct *vm,struct vmap_area *va,$/;"	f
io_res	kernel/setup.c	/^static struct resource io_res[] = {$/;"	v	typeref:struct:resource	file:
iomem_resource	kernel/resource.c	/^struct resource iomem_resource = {$/;"	v	typeref:struct:resource
ioport_resource	kernel/resource.c	/^struct resource ioport_resource = {$/;"	v	typeref:struct:resource
is_vmalloc_or_module_addr	mm/vmalloc.c	/^int is_vmalloc_or_module_addr(const void *x)$/;"	f
isgraph	mm/slub.c	234;"	d	file:
kasprintf	mm/kasprintf.c	/^char *kasprintf(gfp_t gfp,const char *fmt,...)$/;"	f
kernel_code	kernel/setup.c	43;"	d	file:
kernel_data	kernel/setup.c	44;"	d	file:
kernel_map_pages	mm/debug-pagealloc.c	/^void kernel_map_pages(struct page *page,int numpages,int enable)$/;"	f
kfree	mm/slub.c	/^void kfree(const void *x)$/;"	f
kmalloc_caches	mm/slub.c	/^struct kmem_cache *kmalloc_caches[SLUB_PAGE_SHIFT];$/;"	v	typeref:struct:kmem_cache
kmalloc_dma_caches	mm/slub.c	/^static struct kmem_cache *kmalloc_dma_caches[SLUB_PAGE_SHIFT];$/;"	v	typeref:struct:kmem_cache	file:
kmalloc_large_node	mm/slub.c	/^static void *kmalloc_large_node(size_t size,gfp_t flags,int node)$/;"	f	file:
kmap_high_get	mm/highmem.c	/^void *kmap_high_get(struct page *page)$/;"	f
kmap_init	mm/mmu.c	/^static void __init kmap_init(void)$/;"	f	file:
kmem_cache	mm/slub.c	/^static struct kmem_cache *kmem_cache;$/;"	v	typeref:struct:kmem_cache	file:
kmem_cache_alloc	mm/slub.c	/^void *kmem_cache_alloc(struct kmem_cache *s,gfp_t gfpflags)$/;"	f
kmem_cache_alloc_node	mm/slub.c	/^void *kmem_cache_alloc_node(struct kmem_cache *s,$/;"	f
kmem_cache_bootstrap_fixup	mm/slub.c	/^static void __init kmem_cache_bootstrap_fixup(struct kmem_cache *s)$/;"	f	file:
kmem_cache_debug	mm/slub.c	/^static inline int kmem_cache_debug(struct kmem_cache *s)$/;"	f	file:
kmem_cache_files	mm/slub.c	/^static unsigned long kmem_cache_files(unsigned long objsize,$/;"	f	file:
kmem_cache_flags	mm/slub.c	/^static inline unsigned long kmem_cache_flags(unsigned long objsize,$/;"	f	file:
kmem_cache_free	mm/slub.c	/^void kmem_cache_free(struct kmem_cache *s,void *x)$/;"	f
kmem_cache_init	mm/slub.c	/^void __init kmem_cache_init(void)$/;"	f
kmem_cache_node	mm/slub.c	/^static struct kmem_cache *kmem_cache_node;$/;"	v	typeref:struct:kmem_cache	file:
kmem_cache_open	mm/slub.c	/^static int kmem_cache_open(struct kmem_cache *s,$/;"	f	file:
kmem_size	mm/slub.c	/^static int kmem_size = sizeof(struct kmem_cache);$/;"	v	file:
kmemcheck_free_shadow	mm/slub.c	/^void kmemcheck_free_shadow(struct page *page,int order)$/;"	f
kmemcheck_pte_lookup	mm/pte.c	/^pte_t *kmemcheck_pte_lookup(unsigned long address)$/;"	f
kstrdup	mm/util.c	/^char *kstrdup(const char *s,gfp_t gfp)$/;"	f
kunmap_high	mm/highmem.c	/^void kunmap_high(struct page *page)$/;"	f
kvasprintf	mm/kasprintf.c	/^char *kvasprintf(gfp_t gfp,const char *fmt,va_list ap)$/;"	f
lazy_max_pages	mm/vmalloc.c	/^static unsigned long lazy_max_pages(void)$/;"	f	file:
lh	mm/highmem.c	/^	struct list_head lh;     \/* List of page_address_maps *\/$/;"	m	struct:page_address_slot	typeref:struct:page_address_slot::list_head	file:
link_bootmem	mm/memblock.c	/^static void link_bootmem(struct bootmem_data *bdata)$/;"	f	file:
list	mm/highmem.c	/^	struct list_head list;$/;"	m	struct:page_address_map	typeref:struct:page_address_map::list_head	file:
local_flush_tlb_all	mm/tlb.c	/^void local_flush_tlb_all(void)$/;"	f
lock	mm/vmalloc.c	/^	spinlock_t lock;$/;"	m	struct:vmap_block	file:
lock	mm/vmalloc.c	/^	spinlock_t lock;$/;"	m	struct:vmap_block_queue	file:
lock_and_freeze_slab	mm/slub.c	/^static inline int lock_and_freeze_slab(struct kmem_cache_node *n,$/;"	f	file:
lockdep_trace_alloc	mm/page_alloc.c	1222;"	d	file:
lookup_machine_type	kernel/setup.c	/^struct machine_desc *lookup_machine_type(unsigned int nr)$/;"	f
lowmem_limit	mm/mmu.c	/^phys_addr_t lowmem_limit = 0;$/;"	v
lp0	kernel/setup.c	67;"	d	file:
lp1	kernel/setup.c	68;"	d	file:
lp2	kernel/setup.c	69;"	d	file:
machine_arch_type	kernel/setup.c	104;"	d	file:
machine_name	kernel/setup.c	/^static const char *machine_name;$/;"	v	file:
magic	kernel/compat.c	/^			unsigned long magic;$/;"	m	struct:param_struct::__anon3::__anon4	file:
map_kernel_range_noflush	mm/vmalloc.c	/^int map_kernel_range_noflush(unsigned long addr,unsigned long size,$/;"	f
map_lowmem	mm/mmu.c	/^void __init map_lowmem(void)$/;"	f
map_vm_area	mm/vmalloc.c	/^int map_vm_area(struct vm_struct *area,pgprot_t prot,struct page ***pages)$/;"	f
mark_bootmem	mm/bootmem.c	/^static int __init mark_bootmem(unsigned long start,unsigned long end,$/;"	f	file:
mark_bootmem_node	mm/bootmem.c	/^static int __init mark_bootmem_node(bootmem_data_t *bdata,$/;"	f	file:
max_low_pfn	mm/bootmem.c	/^unsigned long max_low_pfn;$/;"	v
max_mapnr	mm/memory.c	/^unsigned long max_mapnr;$/;"	v
max_pfn	mm/bootmem.c	/^unsigned long max_pfn;$/;"	v
mem	kernel/setup.c	/^	struct tag_mem32 mem;$/;"	m	struct:init_tags	typeref:struct:init_tags::tag_mem32	file:
mem_cgroup_subsys	mm/memcontrol.c	/^struct cgroup_subsys mem_cgroup_subsys = {$/;"	v	typeref:struct:cgroup_subsys
mem_fclk_21285	kernel/compat.c	/^			unsigned long mem_fclk_21285;$/;"	m	struct:param_struct::__anon1::__anon2	file:
mem_init	mm/init.c	/^void __init mem_init(void)$/;"	f
mem_map	mm/memory.c	/^struct page *mem_map;$/;"	v	typeref:struct:page
mem_res	kernel/setup.c	/^static struct resource mem_res[] = {$/;"	v	typeref:struct:resource	file:
mem_to_phys	boot_arch.c	/^phys_addr_t mem_to_phys(void *ad)$/;"	f
mem_types	mm/mmu.c	/^static struct mem_type mem_types[] = {$/;"	v	typeref:struct:mem_type	file:
memblock	mm/memblock.c	/^struct memblock memblock = {$/;"	v	typeref:struct:memblock
memblock_add	mm/memblock.c	/^long __init_memblock memblock_add(phys_addr_t base,phys_addr_t size)$/;"	f
memblock_add_region	mm/memblock.c	/^static int memblock_add_region(struct memblock_type *type,$/;"	f	file:
memblock_adjacent_addr	mm/memblock.c	/^static long __init_memblock memblock_adjacent_addr(phys_addr_t base1,$/;"	f	file:
memblock_align_down	mm/memblock.c	/^static phys_addr_t memblock_align_down(phys_addr_t addr,$/;"	f	file:
memblock_align_up	mm/memblock.c	/^static phys_addr_t memblock_align_up(phys_addr_t addr,phys_addr_t align)$/;"	f	file:
memblock_alloc	mm/memblock.c	/^phys_addr_t memblock_alloc(phys_addr_t size,phys_addr_t align)$/;"	f
memblock_alloc_base	mm/memblock.c	/^static phys_addr_t memblock_alloc_base(phys_addr_t size,phys_addr_t align,$/;"	f	file:
memblock_analyze	mm/memblock.c	/^void __init memblock_analyze(void)$/;"	f
memblock_coalesce_regions	mm/memblock.c	/^static void memblock_coalesce_regions(struct memblock_type *type,$/;"	f	file:
memblock_dump	mm/memblock.c	/^static void __init_memblock memblock_dump(struct memblock_type *type,$/;"	f	file:
memblock_dump_all	mm/memblock.c	/^void __init_memblock memblock_dump_all(void)$/;"	f
memblock_find_base	mm/memblock.c	/^static phys_addr_t __init_memblock memblock_find_base(phys_addr_t size,$/;"	f	file:
memblock_find_region	mm/memblock.c	/^static phys_addr_t memblock_find_region(phys_addr_t start,phys_addr_t end,$/;"	f	file:
memblock_init	mm/memblock.c	/^void __init memblock_init(void)$/;"	f
memblock_memory_can_coalesce	mm/memblock.c	/^static int memblock_memory_can_coalesce(phys_addr_t addr1,$/;"	f	file:
memblock_overlaps_addr	mm/memblock.c	/^static int memblock_overlaps_addr(phys_addr_t base1,phys_addr_t size1,$/;"	f	file:
memblock_overlaps_region	mm/memblock.c	/^static int memblock_overlaps_region(struct memblock_type *type,$/;"	f	file:
memblock_regions_adjacent	mm/memblock.c	/^static long memblock_regions_adjacent(struct memblock_type *type,$/;"	f	file:
memblock_remove_region	mm/memblock.c	/^static void __init_memblock memblock_remove_region(struct memblock_type *type,$/;"	f	file:
memblock_reserve	mm/memblock.c	/^int memblock_reserve(phys_addr_t base,phys_addr_t size)$/;"	f
memblock_set_current_limit	mm/memblock.c	/^void memblock_set_current_limit(phys_addr_t limit)$/;"	f
memc_control_reg	kernel/compat.c	/^			unsigned long memc_control_reg;$/;"	m	struct:param_struct::__anon1::__anon2	file:
meminfo	mm/init.c	/^struct meminfo meminfo;$/;"	v	typeref:struct:meminfo
memmap_init	mm/page_alloc.c	294;"	d	file:
memmap_init_zone	mm/page_alloc.c	/^void __meminit memmap_init_zone(unsigned long size,int nid,unsigned long zone,$/;"	f
memory_array0	boot_arch.c	/^unsigned int memory_array0[CONFIG_BANK0_SIZE \/ BYTE_MODIFY];$/;"	v
memory_array1	boot_arch.c	/^unsigned int memory_array1[CONFIG_BANK1_SIZE \/ BYTE_MODIFY];	$/;"	v
min_low_pfn	mm/bootmem.c	/^unsigned long min_low_pfn;$/;"	v
mm_init_owner	mm/fork.c	/^void mm_init_owner(struct mm_struct *mm,struct task_struct *p)$/;"	f
mminit_loglevel	mm/mm_init.c	/^int mminit_loglevel;$/;"	v
mminit_verify_page_links	mm/mm_init.c	/^void __meminit mminit_verify_page_links(struct page *page,enum zone_type zone,$/;"	f
mminit_verify_zonelist	mm/mm_init.c	/^void mminit_verify_zonelist(void)$/;"	f
mod_zone_page_state	mm/vmstat.c	/^void mod_zone_page_state(struct zone *zone,enum zone_stat_item item,$/;"	f
move_freepages	mm/page_alloc.c	/^static int move_freepages(struct zone *zone,$/;"	f	file:
move_freepages_block	mm/page_alloc.c	/^static int move_freepages_block(struct zone *zone,struct page *page,$/;"	f	file:
n	kernel/compat.c	/^			char n[1024 - sizeof(unsigned long)];$/;"	m	struct:param_struct::__anon3::__anon4	file:
new_slab	mm/slub.c	/^static struct page *new_slab(struct kmem_cache *s,gfp_t flags,int node)$/;"	f	file:
next_online_pgdat	mm/mmzone.c	/^struct pglist_data *next_online_pgdat(struct pglist_data *pgdat)$/;"	f
next_zone	mm/mmzone.c	/^struct zone *next_zone(struct zone *zone)$/;"	f
next_zones_zonelist	mm/mmzone.c	/^struct zoneref *next_zones_zonelist(struct zoneref *z,$/;"	f
node	mm/radix-tree.c	/^	struct radix_tree_node *node;$/;"	m	struct:radix_tree_path	typeref:struct:radix_tree_path::radix_tree_node	file:
node_match	mm/slub.c	/^static inline int node_match(struct kmem_cache_cpu *c,int node)$/;"	f	file:
node_nr_objs	mm/slub.c	/^static inline unsigned long node_nr_objs(struct kmem_cache_node *n)$/;"	f	file:
node_nr_slabs	mm/slub.c	/^static inline unsigned long node_nr_slabs(struct kmem_cache_node *n)$/;"	f	file:
node_to_va	mm/vmalloc.c	/^struct vmap_area *node_to_va(struct rb_node *n)$/;"	f
nr_all_pages	mm/page_alloc.c	/^static unsigned long __meminitdata nr_all_pages;$/;"	v	file:
nr_free_pagecache_pages	mm/page_alloc.c	/^unsigned int nr_free_pagecache_pages(void)$/;"	f
nr_free_zone_pages	mm/page_alloc.c	/^static unsigned int nr_free_zone_pages(int offset)$/;"	f	file:
nr_kernel_pages	mm/page_alloc.c	/^static unsigned long __meminitdata nr_kernel_pages;$/;"	v	file:
nr_pages	kernel/compat.c	/^			unsigned long nr_pages;$/;"	m	struct:param_struct::__anon1::__anon2	file:
nr_swap_pages	mm/swap_state.c	/^long nr_swap_pages;$/;"	v
nr_swapfiles	mm/swap_state.c	/^static unsigned int nr_swapfiles;$/;"	v	file:
num_physpages	mm/memory.c	/^unsigned long num_physpages;$/;"	v
object_err	mm/slub.c	/^static void object_err(struct kmem_cache *s,struct page *page,$/;"	f	file:
offset	mm/radix-tree.c	/^	int offset;$/;"	m	struct:radix_tree_path	file:
on_freelist	mm/slub.c	/^static int on_freelist(struct kmem_cache *s,struct page *page,void *search)$/;"	f	file:
oo_make	mm/slub.c	/^static inline struct kmem_cache_order_objects oo_make(int order,$/;"	f	file:
oo_objects	mm/slub.c	/^static inline int oo_objects(struct kmem_cache_order_objects x)$/;"	f	file:
oo_order	mm/slub.c	/^static inline int oo_order(struct kmem_cache_order_objects x)$/;"	f	file:
page	mm/highmem.c	/^	struct page *page;$/;"	m	struct:page_address_map	typeref:struct:page_address_map::page	file:
page_address	mm/highmem.c	/^void *page_address(struct page *page)$/;"	f
page_address_htable	mm/highmem.c	/^} page_address_htable[1 << PA_HASH_ORDER];$/;"	v	typeref:struct:page_address_slot	file:
page_address_init	mm/highmem.c	/^void __init page_address_init(void)$/;"	f
page_address_map	mm/highmem.c	/^struct page_address_map {$/;"	s	file:
page_address_maps	mm/highmem.c	/^static struct page_address_map page_address_maps[LAST_PKMAP];$/;"	v	typeref:struct:page_address_map	file:
page_address_pool	mm/highmem.c	/^static struct list_head page_address_pool;  \/* freelist *\/$/;"	v	typeref:struct:list_head	file:
page_address_slot	mm/highmem.c	/^static struct page_address_slot {$/;"	s	file:
page_alloc_cpu_notify	mm/page_alloc.c	/^static int page_alloc_cpu_notify(void) {}$/;"	f	file:
page_alloc_init	mm/page_alloc.c	/^void __init page_alloc_init(void)$/;"	f
page_cgroup_init_flatmem	mm/page_cgroup.c	/^void __init page_cgroup_init_flatmem(void)$/;"	f
page_group_by_mobility_disabled	mm/mmzone.c	/^int page_group_by_mobility_disabled;$/;"	v
page_is_buddy	mm/page_alloc.c	/^static inline int page_is_buddy(struct page *page,struct page *buddy,$/;"	f	file:
page_is_consistent	mm/page_alloc.c	/^static int page_is_consistent(struct zone *zone,struct page *page)$/;"	f	file:
page_outside_zone_boundaries	mm/page_alloc.c	/^static int page_outside_zone_boundaries(struct zone *zone,struct page *page)$/;"	f	file:
page_poison	mm/debug-pagealloc.c	/^static inline int page_poison(struct page *page)$/;"	f	file:
page_size	kernel/compat.c	/^			unsigned long page_size;  $/;"	m	struct:param_struct::__anon1::__anon2	file:
page_slot	mm/highmem.c	/^static struct page_address_slot *page_slot(struct page *page)$/;"	f	file:
pageblock_default_order	mm/page_alloc.c	/^static inline int pageblock_default_order(unsigned int order)$/;"	f	file:
pageflag_names	mm/page_alloc.c	/^static struct trace_print_flags pageflag_names[] = {$/;"	v	typeref:struct:trace_print_flags	file:
pages_in_bank	kernel/compat.c	/^			unsigned long pages_in_bank[4];$/;"	m	struct:param_struct::__anon1::__anon2	file:
pages_in_vram	kernel/compat.c	/^			unsigned long pages_in_vram;$/;"	m	struct:param_struct::__anon1::__anon2	file:
paging_init	mm/mmu.c	/^void __init paging_init(void)$/;"	f
param_struct	kernel/compat.c	/^struct param_struct {$/;"	s	file:
parse_tag	kernel/setup.c	/^static int __init parse_tag(const struct tag *tag)$/;"	f	file:
parse_tags	kernel/setup.c	/^static void __init parse_tags(const struct tag *t)$/;"	f	file:
paths	kernel/compat.c	/^		char paths[8][128];$/;"	m	union:param_struct::__anon3	file:
pcpu_alloc	mm/percpu.c	/^static void __percpu *pcpu_alloc(size_t size,size_t align,bool reserved)$/;"	f	file:
pcpu_alloc_area	mm/percpu.c	/^static int pcpu_alloc_area(struct pcpu_chunk *chunk,int size,int align)$/;"	f	file:
pcpu_alloc_chunk	mm/percpu.c	/^static struct pcpu_chunk *pcpu_alloc_chunk(void)$/;"	f	file:
pcpu_alloc_mutex	mm/percpu.c	/^static int pcpu_alloc_mutex;$/;"	v	file:
pcpu_alloc_pages	mm/percpu.c	/^static int pcpu_alloc_pages(struct pcpu_chunk *chunk,$/;"	f	file:
pcpu_chunk_addr	mm/percpu.c	/^static unsigned long pcpu_chunk_addr(struct pcpu_chunk *chunk,$/;"	f	file:
pcpu_chunk_page	mm/percpu.c	/^static struct page *pcpu_chunk_page(struct pcpu_chunk *chunk,$/;"	f	file:
pcpu_chunk_relocate	mm/percpu.c	/^static void pcpu_chunk_relocate(struct pcpu_chunk *chunk,int oslot)$/;"	f	file:
pcpu_chunk_slot	mm/percpu.c	/^static int pcpu_chunk_slot(const struct pcpu_chunk *chunk)$/;"	f	file:
pcpu_create_chunk	mm/percpu.c	/^static struct pcpu_chunk *pcpu_create_chunk(void)$/;"	f	file:
pcpu_extend_area_map	mm/percpu.c	/^static int pcpu_extend_area_map(struct pcpu_chunk *chunk,int new_alloc)$/;"	f	file:
pcpu_for_each_pop_region	mm/percpu.c	702;"	d	file:
pcpu_for_each_unpop_region	mm/percpu.c	697;"	d	file:
pcpu_free_area	mm/percpu.c	/^static void pcpu_free_area(struct pcpu_chunk *chunk,int freeme)$/;"	f	file:
pcpu_free_chunk	mm/percpu.c	/^static void pcpu_free_chunk(struct pcpu_chunk *chunk)$/;"	f	file:
pcpu_free_pages	mm/percpu.c	/^static void pcpu_free_pages(struct pcpu_chunk *chunk,$/;"	f	file:
pcpu_get_pages_and_bitmap	mm/percpu.c	/^static struct page **pcpu_get_pages_and_bitmap(struct pcpu_chunk *chunk,$/;"	f	file:
pcpu_get_vm_areas	mm/percpu.c	/^struct vm_struct **pcpu_get_vm_areas(const unsigned long *offsets,$/;"	f
pcpu_lock	mm/percpu.c	/^static int pcpu_lock;$/;"	v	file:
pcpu_map_pages	mm/percpu.c	/^static int pcpu_map_pages(struct pcpu_chunk *chunk,$/;"	f	file:
pcpu_mem_alloc	mm/percpu.c	/^static void *pcpu_mem_alloc(size_t size)$/;"	f	file:
pcpu_mem_free	mm/percpu.c	/^static void pcpu_mem_free(void *ptr,size_t size)$/;"	f	file:
pcpu_need_to_extend	mm/percpu.c	/^static int pcpu_need_to_extend(struct pcpu_chunk *chunk)$/;"	f	file:
pcpu_next_pop	mm/percpu.c	/^void __maybe_unused pcpu_next_pop(struct pcpu_chunk *chunk,$/;"	f
pcpu_next_unpop	mm/percpu.c	/^void __maybe_unused pcpu_next_unpop(struct pcpu_chunk *chunk,$/;"	f
pcpu_page_idx	mm/percpu.c	/^static int __maybe_unused pcpu_page_idx(unsigned int cpu,int page_idx)$/;"	f	file:
pcpu_populate_chunk	mm/percpu.c	/^static int pcpu_populate_chunk(struct pcpu_chunk *chunk,int off,int size)$/;"	f	file:
pcpu_post_map_flush	mm/percpu.c	/^static void pcpu_post_map_flush(struct pcpu_chunk *chunk,$/;"	f	file:
pcpu_post_unmap_tlb_flush	mm/percpu.c	/^static void pcpu_post_unmap_tlb_flush(struct pcpu_chunk *chunk,$/;"	f	file:
pcpu_pre_unmap_flush	mm/percpu.c	/^static void pcpu_pre_unmap_flush(struct pcpu_chunk *chunk,$/;"	f	file:
pcpu_reserved_chunk	mm/percpu.c	/^static struct pcpu_chunk *pcpu_reserved_chunk;$/;"	v	typeref:struct:pcpu_chunk	file:
pcpu_reserved_chunk_limit	mm/percpu.c	/^static int pcpu_reserved_chunk_limit;$/;"	v	file:
pcpu_set_page_chunk	mm/percpu.c	/^static void pcpu_set_page_chunk(struct page *page,struct pcpu_chunk *pcpu)$/;"	f	file:
pcpu_size_to_slot	mm/percpu.c	/^static int pcpu_size_to_slot(int size)$/;"	f	file:
pcpu_split_block	mm/percpu.c	/^static void pcpu_split_block(struct pcpu_chunk *chunk,int i,$/;"	f	file:
pcpu_unmap_pages	mm/percpu.c	/^static void pcpu_unmap_pages(struct pcpu_chunk * chunk,$/;"	f	file:
pfn_to_bitidx	mm/page_alloc.c	/^static inline int pfn_to_bitidx(struct zone *zone,unsigned long pfn)$/;"	f	file:
pfn_to_mem	mm/memblock.c	/^void *pfn_to_mem(unsigned int idx)$/;"	f
pgdat_page_cgroup_init	mm/page_alloc.c	/^static inline void pgdat_page_cgroup_init(struct pglist_data *pgdat) {}$/;"	f	file:
pgdat_resize_init	mm/page_alloc.c	/^static inline void pgdat_resize_init(struct pglist_data *pgdat) {}$/;"	f	file:
pgprot_kernel	mm/mmu.c	/^pgprot_t pgprot_kernel;$/;"	v
pgprot_user	mm/mmu.c	/^pgprot_t pgprot_user;$/;"	v
phys_to_mem	boot_arch.c	/^void *phys_to_mem(phys_addr_t addr)$/;"	f
pid	mm/slub.c	/^	int pid;$/;"	m	struct:track	file:
pkmap_count	mm/highmem.c	/^static int pkmap_count[LAST_PKMAP];$/;"	v	file:
pkmap_page_table	mm/highmem.c	/^pte_t *pkmap_page_table;$/;"	v
pmd	mm/mmu.c	/^	unsigned int pmd;$/;"	m	struct:cachepolicy	file:
pointer	mm/vsprintf.c	/^static char *pointer(const char *fmt,char *buf,char *end,$/;"	f	file:
poison_highpage	mm/debug-pagealloc.c	/^static void poison_highpage(struct page *page)$/;"	f	file:
poison_page	mm/debug-pagealloc.c	/^static void poison_page(struct page *page)$/;"	f	file:
poison_pages	mm/debug-pagealloc.c	/^static void poison_pages(struct page *page,int n)$/;"	f	file:
policy	mm/mmu.c	/^	const char policy[16];$/;"	m	struct:cachepolicy	file:
populated_zone	mm/page_alloc.c	/^inline int populated_zone(struct zone *zone)$/;"	f
precision	mm/vsprintf.c	/^	s16 precision;    \/* # of digits\/chars *\/$/;"	m	struct:printf_spec	file:
prep_compound_page	mm/page_alloc.c	/^void prep_compound_page(struct page *page,unsigned long order)$/;"	f
prep_new_page	mm/page_alloc.c	/^static int prep_new_page(struct page *page,int order,gfp_t gfp_flags)$/;"	f	file:
prep_zero_page	mm/page_alloc.c	/^static inline void prep_zero_page(struct page *page,int order,$/;"	f	file:
prepare_page_table	mm/mmu.c	/^static inline void prepare_page_table(void)$/;"	f	file:
print_page_info	mm/slub.c	/^static void print_page_info(struct page *page)$/;"	f	file:
print_section	mm/slub.c	/^static void print_section(char *text,u8 *addr,unsigned int length)$/;"	f	file:
print_track	mm/slub.c	/^static void print_track(const char *s,struct track *t)$/;"	f	file:
print_tracking	mm/slub.c	/^static void print_tracking(struct kmem_cache *s,void *object)$/;"	f	file:
print_trailer	mm/slub.c	/^static void print_trailer(struct kmem_cache *s,struct page *page,u8 *p)$/;"	f	file:
printf_spec	mm/vsprintf.c	/^struct printf_spec {$/;"	s	file:
protection_map	mm/mmap.c	/^pgprot_t protection_map[16] = {$/;"	v
pte	mm/mmu.c	/^	pteval_t pte;$/;"	m	struct:cachepolicy	file:
ptr_to_indirect	mm/radix-tree.c	/^static inline void *ptr_to_indirect(void *ptr)$/;"	f	file:
purge	mm/vmalloc.c	/^	struct list_head purge;$/;"	m	struct:vmap_block	typeref:struct:vmap_block::list_head	file:
purge_fragmented_blocks	mm/vmalloc.c	/^static void purge_fragmented_blocks(int cpu)$/;"	f	file:
purge_fragmented_blocks_allcpus	mm/vmalloc.c	/^static void purge_fragmented_blocks_allcpus(void)$/;"	f	file:
purge_vmap_aera_lazy	mm/vmalloc.c	/^static void purge_vmap_aera_lazy(void)$/;"	f	file:
purge_vmap_area_lazy	mm/vmalloc.c	/^void purge_vmap_area_lazy(void)$/;"	f
put_compound_page	mm/swap.c	/^static void put_compound_page(struct page *page)$/;"	f	file:
put_page	mm/swap.c	/^void put_page(struct page *page)$/;"	f
pvm_determine_end	mm/vmalloc.c	/^unsigned long pvm_determine_end(struct vmap_area **pnext,$/;"	f
pvm_find_next_prev	mm/vmalloc.c	/^bool pvm_find_next_prev(unsigned long end,$/;"	f
qualifier	mm/vsprintf.c	/^	u8 qualifier;     \/* number qualifier,one of 'hHILtzZ' *\/$/;"	m	struct:printf_spec	file:
r1	register_simulate.c	/^static u32 r1;$/;"	v	file:
r2	register_simulate.c	/^static u32 r2;$/;"	v	file:
radix_tree_delete	mm/radix-tree.c	/^void *radix_tree_delete(struct radix_tree_root *root,unsigned long index)$/;"	f
radix_tree_maxindex	mm/radix-tree.c	/^static inline unsigned long radix_tree_maxindex(unsigned int height)$/;"	f	file:
radix_tree_node	mm/radix-tree.c	/^struct radix_tree_node {$/;"	s	file:
radix_tree_node_cachep	mm/radix-tree.c	/^static struct kmem_cache *radix_tree_node_cachep;$/;"	v	typeref:struct:kmem_cache	file:
radix_tree_node_free	mm/radix-tree.c	/^static inline void radix_tree_node_free(struct radix_tree_node *node)$/;"	f	file:
radix_tree_node_rcu_free	mm/radix-tree.c	/^static void radix_tree_node_rcu_free(struct rcu_head *head)$/;"	f	file:
radix_tree_path	mm/radix-tree.c	/^struct radix_tree_path {$/;"	s	file:
radix_tree_shrink	mm/radix-tree.c	/^static inline void radix_tree_shrink(struct radix_tree_root *root)$/;"	f	file:
radix_tree_tag_clear	mm/radix-tree.c	/^void *radix_tree_tag_clear(struct radix_tree_root *root,$/;"	f
ramdisk_size	kernel/compat.c	/^			unsigned long ramdisk_size;$/;"	m	struct:param_struct::__anon1::__anon2	file:
rb_erase	mm/rbtree.c	/^void rb_erase(struct rb_node *node,struct rb_root *root)$/;"	f
rb_insert_color	mm/rbtree.c	/^void rb_insert_color(struct rb_node *node,struct rb_root *root)$/;"	f
rb_next	mm/rbtree.c	/^struct rb_node *rb_next(struct rb_node *node)$/;"	f
rb_prev	mm/rbtree.c	/^struct rb_node *rb_prev(struct rb_node *node)$/;"	f
rcu_free_slab	mm/slub.c	/^static void rcu_free_slab(struct rcu_head *h)$/;"	f	file:
rcu_free_va	mm/vmalloc.c	/^static void rcu_free_va(struct rcu_head *head)$/;"	f	file:
rcu_free_vb	mm/vmalloc.c	/^static void rcu_free_vb(struct rcu_head *head)$/;"	f	file:
rcu_head	mm/radix-tree.c	/^	struct rcu_head rcu_head;$/;"	m	struct:radix_tree_node	typeref:struct:radix_tree_node::rcu_head	file:
rcu_head	mm/vmalloc.c	/^	struct rcu_head  rcu_head;$/;"	m	struct:vmap_block	typeref:struct:vmap_block::rcu_head	file:
rd_start	kernel/compat.c	/^			unsigned long rd_start;$/;"	m	struct:param_struct::__anon1::__anon2	file:
reboot_setup	kernel/reboot.c	/^int __init reboot_setup(char *str)$/;"	f
remove_partial	mm/slub.c	/^static void remove_partial(struct kmem_cache *s,struct page *page)$/;"	f	file:
remove_vm_area	mm/vmalloc.c	/^struct vm_struct *remove_vm_area(const void *addr)$/;"	f
request_resource	kernel/resource.c	/^int request_resource(struct resource *root,struct resource *new)$/;"	f
request_resource_conflict	kernel/resource.c	/^struct resource *request_resource_conflict(struct resource *root,struct resource *new)$/;"	f
request_standard_resource	kernel/setup.c	/^static void __init request_standard_resource(struct machine_desc *mdesc)$/;"	f	file:
reserve_bootmem	mm/bootmem.c	/^int __init reserve_bootmem(unsigned long addr,unsigned long size,$/;"	f
reserve_crashkernel	kernel/setup.c	/^static inline void reserve_crashkernel(void) {}$/;"	f	file:
restore_bytes	mm/slub.c	/^static void restore_bytes(struct kmem_cache *s,char *message,u8 data,$/;"	f	file:
rmqueue_bulk	mm/page_alloc.c	/^static int rmqueue_bulk(struct zone *zone,unsigned int order,$/;"	f	file:
rmv_page_order	mm/page_alloc.c	/^static inline void rmv_page_order(struct page *page)$/;"	f	file:
root_tag_clear	mm/radix-tree.c	/^static inline void root_tag_clear(struct radix_tree_root *root,$/;"	f	file:
root_tag_clear_all	mm/radix-tree.c	/^static inline void root_tag_clear_all(struct radix_tree_root *root)$/;"	f	file:
root_tag_get	mm/radix-tree.c	/^static inline int root_tag_get(struct radix_tree_root *root,$/;"	f	file:
rootdev	kernel/compat.c	/^			unsigned long rootdev;$/;"	m	struct:param_struct::__anon1::__anon2	file:
s	kernel/compat.c	/^		} s;$/;"	m	union:param_struct::__anon1	typeref:struct:param_struct::__anon1::__anon2	file:
s	kernel/compat.c	/^		} s;$/;"	m	union:param_struct::__anon3	typeref:struct:param_struct::__anon3::__anon4	file:
sanity_check_meminfo	mm/mmu.c	/^static void __init sanity_check_meminfo(void)$/;"	f	file:
save_atags	kernel/atags.c	/^void __init save_atags(const struct tag *tags)$/;"	f
set_bit	bitmap.c	/^void set_bit(int nr,unsigned int *byte)$/;"	f
set_cr1	register_simulate.c	/^void set_cr1(u32 value)$/;"	f
set_cr2	register_simulate.c	/^void set_cr2(u32 value)$/;"	f
set_freepointer	mm/slub.c	/^static inline void set_freepointer(struct kmem_cache *s,void *object,void *fp)$/;"	f	file:
set_min_partial	mm/slub.c	/^static void set_min_partial(struct kmem_cache *s,unsigned long min)$/;"	f	file:
set_page_order	mm/page_alloc.c	/^static inline void set_page_order(struct page *page,int order)$/;"	f	file:
set_page_poison	mm/debug-pagealloc.c	/^static inline set_page_poison(struct page *page)$/;"	f	file:
set_pageblock_flags_group	mm/page_alloc.c	/^void set_pageblock_flags_group(struct page *page,unsigned long flags,$/;"	f
set_pageblock_migratetype	mm/page_alloc.c	/^static void set_pageblock_migratetype(struct page *page,int migratetype)$/;"	f	file:
set_pageblock_order	mm/page_alloc.c	125;"	d	file:
set_pte_ext	mm/mmu.c	/^void set_pte_ext(phys_addr_t addr,unsigned long pte,int e)$/;"	f
set_zonelist_order	mm/page_alloc.c	/^static void set_zonelist_order(void)$/;"	f	file:
setup_arch	kernel/setup.c	/^void __init setup_arch(void)$/;"	f
setup_bootparams	kernel/mach-6410.c	/^void __uboot setup_bootparams(void)$/;"	f
setup_machine	kernel/setup.c	/^static struct machine_desc * __init setup_machine(unsigned int nr)$/;"	f	file:
setup_object	mm/slub.c	/^static void setup_object(struct kmem_cache *s,struct page *page,$/;"	f	file:
setup_object_debug	mm/slub.c	/^static void setup_object_debug(struct kmem_cache *s,struct page *page,$/;"	f	file:
setup_usemap	mm/page_alloc.c	/^static void __init setup_usemap(struct pglist_data *pgdat,$/;"	f	file:
should_alloc_retry	mm/page_alloc.c	/^static inline int should_alloc_retry(gfp_t gfp_mask,unsigned int order,$/;"	f	file:
should_fail_alloc_page	mm/page_alloc.c	/^static inline int should_fail_alloc_page(gfp_t gfp_mask,unsigned int order)$/;"	f	file:
show_free_areas	mm/page_alloc.c	/^void show_free_areas(void)$/;"	f
show_mem	mm/init.c	/^void show_mem(void)$/;"	f
show_node	mm/page_alloc.c	/^static inline void show_node(struct zone *zone)$/;"	f	file:
show_swap_cache_info	mm/swap_state.c	/^void show_swap_cache_info(void)$/;"	f
size_index	mm/slub.c	/^static s8 size_index[24] = {$/;"	v	file:
size_index_elem	mm/slub.c	/^static inline int size_index_elem(size_t bytes)$/;"	f	file:
skip_atoi	mm/vsprintf.c	/^static int skip_atoi(const char **s)$/;"	f	file:
slab_alloc	mm/slub.c	/^static void *slab_alloc(struct kmem_cache *s,$/;"	f	file:
slab_bug	mm/slub.c	/^static void slab_bug(struct kmem_cache *s,char *fmt,...)$/;"	f	file:
slab_err	mm/slub.c	/^static void slab_err(struct kmem_cache *s,struct page *page,char *fmt,...)$/;"	f	file:
slab_fix	mm/slub.c	/^static void slab_fix(struct kmem_cache *s,char *fmt,...)$/;"	f	file:
slab_free	mm/slub.c	/^static inline void slab_free(struct kmem_cache *s,$/;"	f	file:
slab_free_hook	mm/slub.c	/^static inline void slab_free_hook(struct kmem_cache *s,void *x)$/;"	f	file:
slab_free_hook_irq	mm/slub.c	/^static inline void slab_free_hook_irq(struct kmem_cache *s,$/;"	f	file:
slab_is_available	mm/slub.c	/^int slab_is_available(void)$/;"	f
slab_lock	mm/slub.c	/^static inline void slab_lock(struct page *page)$/;"	f	file:
slab_order	mm/slub.c	/^static inline int slab_order(int size,int min_objects,$/;"	f	file:
slab_out_of_memory	mm/slub.c	/^static void slab_out_of_memory(struct kmem_cache *s,$/;"	f	file:
slab_pad_check	mm/slub.c	/^static int slab_pad_check(struct kmem_cache *s,struct page *page)$/;"	f	file:
slab_per_alloc_hook	mm/slub.c	/^static inline int slab_per_alloc_hook(struct kmem_cache *s,$/;"	f	file:
slab_post_alloc_hook	mm/slub.c	/^static inline void slab_post_alloc_hook(struct kmem_cache *s,gfp_t flags,$/;"	f	file:
slab_state	mm/slub.c	/^} slab_state = DOWN;$/;"	v	typeref:enum:__anon6	file:
slab_trylock	mm/slub.c	832;"	d	file:
slab_unlock	mm/slub.c	/^static inline void slab_unlock(struct page *page)$/;"	f	file:
slots	mm/radix-tree.c	/^	void __rcu *slots[RADIX_TREE_MAP_SIZE];$/;"	m	struct:radix_tree_node	file:
slub_debug	mm/slub.c	/^static int slub_debug = DEBUG_DEFAULT_FLAGS;$/;"	v	file:
slub_debug_slabs	mm/slub.c	/^static char *slub_debug_slabs;$/;"	v	file:
slub_max_order	mm/slub.c	/^static int slub_max_order = PAGE_ALLOC_COSTLY_ORDER;$/;"	v	file:
slub_min_objects	mm/slub.c	/^static int slub_min_objects;$/;"	v	file:
slub_min_order	mm/slub.c	/^static int slub_min_order;$/;"	v	file:
smk6410_fixup	kernel/mach-6410.c	/^static void __init smk6410_fixup(struct machine_desc *desc,$/;"	f	file:
sounddefault	kernel/compat.c	/^			unsigned long sounddefault;$/;"	m	struct:param_struct::__anon1::__anon2	file:
squash_mem_tags	kernel/setup.c	/^static void __init squash_mem_tags(struct tag *tag)$/;"	f	file:
stat	mm/slub.c	/^static inline void stat(struct kmem_cache *s,enum stat_item si)$/;"	f	file:
string	mm/vsprintf.c	/^static char *string(char *buf,char *end,const char *s,$/;"	f	file:
swap_cache_info	mm/swap_state.c	/^} swap_cache_info;$/;"	v	typeref:struct:__anon5	file:
swapper_space	mm/swap_state.c	/^struct address_space swapper_space;$/;"	v	typeref:struct:address_space
sysctl_overcommit_memory	mm/mmap.c	/^int sysctl_overcommit_memory = OVERCOMMIT_GUESS;  \/* heuristic overcommit *\/$/;"	v
system_rev	kernel/compat.c	/^			unsigned long system_rev;$/;"	m	struct:param_struct::__anon1::__anon2	file:
system_serial_high	kernel/compat.c	/^			unsigned long system_serial_high;$/;"	m	struct:param_struct::__anon1::__anon2	file:
system_serial_low	kernel/compat.c	/^			unsigned long system_serial_low;$/;"	m	struct:param_struct::__anon1::__anon2	file:
tag_clear	mm/radix-tree.c	/^static inline void tag_clear(struct radix_tree_node *node,unsigned int tag,$/;"	f	file:
tag_get	mm/radix-tree.c	/^static inline int tag_get(struct radix_tree_node *node,$/;"	f	file:
tags	mm/radix-tree.c	/^	unsigned long tags[RADIX_TREE_MAX_TAGS][RADIX_TREE_TAG_LONGS];$/;"	m	struct:radix_tree_node	file:
test_and_clear_bit	bitmap.c	/^int test_and_clear_bit(int nr,unsigned int *byte)$/;"	f
test_and_set_bit	bitmap.c	/^int test_and_set_bit(int nr,unsigned int *byte)$/;"	f
test_bit	bitmap.c	/^int test_bit(int nr,unsigned int *byte)$/;"	f
top_pmd	mm/mmu.c	/^pmd_t *top_pmd;$/;"	v
total_swap_pages	mm/swap_state.c	/^long total_swap_pages;$/;"	v
total_usage	mm/page_cgroup.c	/^static unsigned long total_usage;$/;"	v	file:
totalhigh_pages	mm/memory.c	/^unsigned long totalhigh_pages;$/;"	v
totalram_pages	mm/memory.c	/^unsigned long totalram_pages;$/;"	v
trace_mm_page_free_trace	mm/page_alloc.c	/^static inline void trace_mm_page_free_trace(struct page *p,int order) {}$/;"	f	file:
track	mm/slub.c	/^struct track {$/;"	s	file:
track_item	mm/slub.c	/^enum track_item {$/;"	g	file:
try_purge_vmap_area_lazy	mm/vmalloc.c	/^static void try_purge_vmap_area_lazy(void)$/;"	f	file:
type	mm/vsprintf.c	/^	u8 type;          \/*format_type enum *\/$/;"	m	struct:printf_spec	file:
u1	kernel/compat.c	/^	} u1;$/;"	m	struct:param_struct	typeref:union:param_struct::__anon1	file:
u2	kernel/compat.c	/^	} u2;$/;"	m	struct:param_struct	typeref:union:param_struct::__anon3	file:
u_boot_start	uboot.c	/^void u_boot_start(void)$/;"	f
unfreeze_slab	mm/slub.c	/^static void unfreeze_slab(struct kmem_cache *s,struct page *page,int tail)$/;"	f	file:
unlock_kmao_any	mm/highmem.c	36;"	d	file:
unmap_kernel_range_noflush	mm/vmalloc.c	/^void unmap_kernel_range_noflush(unsigned long addr,unsigned long size)$/;"	f
unmap_vmap_area	mm/vmalloc.c	/^static void unmap_vmap_area(struct vmap_area *va)$/;"	f	file:
unpoison_highpage	mm/debug-pagealloc.c	/^static void unpoison_highpage(struct page *page)$/;"	f	file:
unpoison_page	mm/debug-pagealloc.c	/^static void unpoison_page(struct page *page)$/;"	f	file:
unpoison_pages	mm/debug-pagealloc.c	/^static void unpoison_pages(struct page *page,int n)$/;"	f	file:
unused	kernel/compat.c	/^		char unused[256];$/;"	m	union:param_struct::__anon1	file:
usemap_size	mm/page_alloc.c	/^static unsigned long __init usemap_size(unsigned long zonesize)$/;"	f	file:
va	mm/vmalloc.c	/^	struct vmap_area *va;$/;"	m	struct:vmap_block	typeref:struct:vmap_block::vmap_area	file:
vbq	mm/vmalloc.c	/^	struct vmap_block_queue *vbq;$/;"	m	struct:vmap_block	typeref:struct:vmap_block::vmap_block_queue	file:
vectors_base	mm/mmu.c	710;"	d	file:
vectors_page	mm/traps.c	/^void *vectors_page;$/;"	v
vfree	mm/vmalloc.c	/^void vfree(const void *addr)$/;"	f
video_num_cols	kernel/compat.c	/^			unsigned long video_num_cols;$/;"	m	struct:param_struct::__anon1::__anon2	file:
video_num_rows	kernel/compat.c	/^			unsigned long video_num_rows;$/;"	m	struct:param_struct::__anon1::__anon2	file:
video_ram	kernel/setup.c	42;"	d	file:
video_x	kernel/compat.c	/^			unsigned long video_x;$/;"	m	struct:param_struct::__anon1::__anon2	file:
video_y	kernel/compat.c	/^			unsigned long video_y;$/;"	m	struct:param_struct::__anon1::__anon2	file:
virt_arch_init	boot_arch.c	/^void virt_arch_init(void)$/;"	f
virtual	mm/highmem.c	/^	void *virtual;$/;"	m	struct:page_address_map	file:
virtual_memory_init	boot_arch.c	/^void __uboot virtual_memory_init(void)$/;"	f
vm_total_pages	mm/vmscan.c	/^long vm_total_pages; \/* The total number of pages which the VM controls*\/$/;"	v
vmalloc_min	mm/mmu.c	/^void *vmalloc_min = (void *)(VMALLOC_END - SZ_128M);$/;"	v
vmalloc_to_page	mm/vmalloc.c	/^struct page *vmalloc_to_page(const void *vmalloc_addr)$/;"	f
vmap_area_lock	mm/percpu.c	/^static int vmap_area_lock;$/;"	v	file:
vmap_area_lock	mm/vmalloc.c	/^int vmap_area_lock;$/;"	v
vmap_area_pcpu_hole	mm/vmalloc.c	/^unsigned long vmap_area_pcpu_hole;$/;"	v
vmap_area_root	mm/vmalloc.c	/^static struct rb_root vmap_area_root = RB_ROOT;$/;"	v	typeref:struct:rb_root	file:
vmap_block	mm/vmalloc.c	/^struct vmap_block {$/;"	s	file:
vmap_block_queue	mm/vmalloc.c	/^struct vmap_block_queue {$/;"	s	file:
vmap_block_tree_lock	mm/vmalloc.c	/^static int vmap_block_tree_lock;$/;"	v	file:
vmap_debug_free_range	mm/vmalloc.c	/^static void vmap_debug_free_range(unsigned long start,unsigned long end)$/;"	f	file:
vmap_lazy_nr	mm/vmalloc.c	/^static atomic_t vmap_lazy_nr = ATOMIC_INIT(0);$/;"	v	file:
vmap_page_range	mm/vmalloc.c	/^static int vmap_page_range(unsigned long start,unsigned long end,$/;"	f	file:
vmap_page_range_noflush	mm/vmalloc.c	/^static int vmap_page_range_noflush(unsigned long start,unsigned long end,$/;"	f	file:
vmap_pmd_range	mm/vmalloc.c	/^static int vmap_pmd_range(pud_t *pud,unsigned long addr,$/;"	f	file:
vmap_pte_range	mm/vmalloc.c	/^static int vmap_pte_range(pmd_t *pmd,unsigned long addr,$/;"	f	file:
vmap_pud_range	mm/vmalloc.c	/^static int vmap_pud_range(pgd_t *pgd,unsigned long addr,$/;"	f	file:
vmlist	mm/vmalloc.c	/^struct vm_struct *vmlist;$/;"	v	typeref:struct:vm_struct
vmlist_lock	mm/vmalloc.c	/^int vmlist_lock;$/;"	v
vsnprintf	mm/vsprintf.c	/^int vsnprintf(char *buf,size_t size,const char *fmt,va_list args)$/;"	f
vunmap_page_range	mm/vmalloc.c	/^static void vunmap_page_range(unsigned long addr,unsigned long end)$/;"	f	file:
vunmap_pmd_range	mm/vmalloc.c	/^static void vunmap_pmd_range(pud_t *pud,unsigned long addr,unsigned long end)$/;"	f	file:
vunmap_pte_range	mm/vmalloc.c	/^static void vunmap_pte_range(pmd_t *pmd,unsigned long addr,unsigned long end)$/;"	f	file:
vunmap_pud_range	mm/vmalloc.c	/^static void vunmap_pud_range(pgd_t *pgd,unsigned long addr,unsigned long end)$/;"	f	file:
vzalloc	mm/vmalloc.c	/^void *vzalloc(unsigned long size)$/;"	f
wake_all_kswapd	mm/page_alloc.c	/^static inline void wake_all_kswapd(unsigned int order,$/;"	f	file:
when	mm/slub.c	/^	unsigned long when; \/* When did the operation *\/$/;"	m	struct:track	file:
zlc_mark_zone_full	mm/page_alloc.c	/^static void zlc_mark_zone_full(struct zonelist *zonelist,struct zoneref *z)$/;"	f	file:
zlc_setup	mm/page_alloc.c	/^static nodemask_t *zlc_setup(struct zonelist *zonelist,int alloc_flags)$/;"	f	file:
zlc_zone_worth_trying	mm/page_alloc.c	/^static int zlc_zone_worth_trying(struct zonelist *zonelist,struct zoneref *z,$/;"	f	file:
zone_absent_pages_in_node	mm/page_alloc.c	/^inline unsigned long __meminit zone_absent_pages_in_node(int nid,$/;"	f
zone_init_free_lists	mm/page_alloc.c	/^static void __meminit zone_init_free_lists(struct zone *zone)$/;"	f	file:
zone_names	mm/page_alloc.c	/^static char *const zone_names[MAX_NR_ZONES] = {$/;"	v	file:
zone_pcp_init	mm/page_alloc.c	/^static inline void zone_pcp_init(struct zone *zone) {}$/;"	f	file:
zone_seqlock_init	mm/page_alloc.c	/^static inline void zone_seqlock_init(struct zone *zone) {}$/;"	f	file:
zone_spanned_pages_in_node	mm/page_alloc.c	/^inline unsigned long __meminit zone_spanned_pages_in_node(int nid,$/;"	f
zone_wait_table_init	mm/page_alloc.c	/^static int zone_wait_table_init(struct zone *zone,$/;"	f	file:
zone_watermark_ok	mm/page_alloc.c	/^bool zone_watermark_ok(struct zone *z,int order,unsigned long mark,$/;"	f
zonelist_order_name	mm/page_alloc.c	/^static char zonelist_order_name[3][8] = {"Default","Node","Zone"};$/;"	v	file:
zoneref_set_zone	mm/page_alloc.c	/^static void zoneref_set_zone(struct zone *zone,struct zoneref *zoneref)$/;"	f	file:
zref_in_nodemask	mm/mmzone.c	/^static inline int zref_in_nodemask(struct zoneref *zref,nodemask_t *nodes)$/;"	f	file:
